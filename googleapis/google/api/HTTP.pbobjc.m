// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/http.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "google/api/HTTP.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - HTTPRoot

@implementation HTTPRoot

@end

#pragma mark - HTTPRoot_FileDescriptor

static GPBFileDescriptor *HTTPRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - HttpRule

@implementation HttpRule

@dynamic patternOneOfCase;
@dynamic get;
@dynamic put;
@dynamic post;
@dynamic delete_p;
@dynamic patch;
@dynamic custom;
@dynamic body;
@dynamic additionalBindingsArray, additionalBindingsArray_Count;

typedef struct HttpRule__storage_ {
  uint32_t _has_storage_[2];
  NSString *get;
  NSString *put;
  NSString *post;
  NSString *delete_p;
  NSString *patch;
  NSString *body;
  CustomHttpPattern *custom;
  NSMutableArray *additionalBindingsArray;
} HttpRule__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageOneofDescription oneofs[] = {
      {
        .name = "pattern",
        .index = -1,
      },
    };
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "get",
        .number = HttpRule_FieldNumber_Get,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(HttpRule__storage_, get),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "put",
        .number = HttpRule_FieldNumber_Put,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(HttpRule__storage_, put),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "post",
        .number = HttpRule_FieldNumber_Post,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(HttpRule__storage_, post),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "delete_p",
        .number = HttpRule_FieldNumber_Delete_p,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(HttpRule__storage_, delete_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "patch",
        .number = HttpRule_FieldNumber_Patch,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(HttpRule__storage_, patch),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "body",
        .number = HttpRule_FieldNumber_Body,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(HttpRule__storage_, body),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "custom",
        .number = HttpRule_FieldNumber_Custom,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(HttpRule__storage_, custom),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(CustomHttpPattern),
        .fieldOptions = NULL,
      },
      {
        .name = "additionalBindingsArray",
        .number = HttpRule_FieldNumber_AdditionalBindingsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(HttpRule__storage_, additionalBindingsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(HttpRule),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HttpRule class]
                                     rootClass:[HTTPRoot class]
                                          file:HTTPRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:oneofs
                                    oneofCount:sizeof(oneofs) / sizeof(GPBMessageOneofDescription)
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(HttpRule__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void HttpRule_ClearPatternOneOfCase(HttpRule *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, 0);
}
#pragma mark - CustomHttpPattern

@implementation CustomHttpPattern

@dynamic kind;
@dynamic path;

typedef struct CustomHttpPattern__storage_ {
  uint32_t _has_storage_[1];
  NSString *kind;
  NSString *path;
} CustomHttpPattern__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kind",
        .number = CustomHttpPattern_FieldNumber_Kind,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(CustomHttpPattern__storage_, kind),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "path",
        .number = CustomHttpPattern_FieldNumber_Path,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(CustomHttpPattern__storage_, path),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CustomHttpPattern class]
                                     rootClass:[HTTPRoot class]
                                          file:HTTPRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(CustomHttpPattern__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
