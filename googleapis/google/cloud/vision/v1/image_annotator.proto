syntax = "proto3";

package google.cloud.vision.v1;

import "google/api/annotations.proto";
import "google/cloud/vision/v1/geometry.proto";
import "google/rpc/status.proto";
import "google/type/color.proto";
import "google/type/latlng.proto";

option java_multiple_files = true;
option java_package = "com.google.cloud.vision.v1";
option java_outer_classname = "ImageAnnotatorProto";
option cc_enable_arenas = true;

// Service that performs Vision recognition tasks, such as face, landmark, logo,
// label, and text recognition, over client images, and returns recognized
// entities from the images.
service ImageAnnotator {
  // Run image detection and annotation for a batch of images.
  rpc BatchAnnotateImages(BatchAnnotateImagesRequest)
      returns (BatchAnnotateImagesResponse) {
    option (google.api.http) = {
      post: "/v1/images:annotate" body: "*"
    };
    //option end_user_creds_requested = true;
    //option security_label = "read";
    //option duplicate_suppression = true;
    //option fail_fast = true;
    //option protocol = TCP;
  }
}

// The <em>Feature</em> indicates what type of image detection task to perform.
// Users describe the type of Vision tasks to perform over images by
// using <em>Feature</em>s. Features encode the Vision vertical to operate on
// and the number of top-scoring results to return.
message Feature {
  // Type of image feature.
  enum Type {
    TYPE_UNSPECIFIED = 0;       // Unspecified feature type.
    FACE_DETECTION = 1;         // Run face detection.
    LANDMARK_DETECTION = 2;     // Run landmark detection.
    LOGO_DETECTION = 3;         // Run logo detection.
    LABEL_DETECTION = 4;        // Run label detection.
    TEXT_DETECTION = 5;         // Run OCR.
    SAFE_SEARCH_DETECTION = 6;  // Run various computer vision models to
                                // compute image safe-search properties.
    IMAGE_PROPERTIES = 7;       // Compute image properties.
  };

  // The feature type.
  Type type = 1;

  // Maximum number of results of this type.
  int32 max_results = 2;
};

// External image source (i.e. Google Cloud Storage image location).
message ImageSource {
  // Google Cloud Storage image URI. It must be in the following form:
  // "gs://bucket_name/object_name". For more
  // details, please see: https://cloud.google.com/storage/docs/reference-uris.
  // NOTE: Cloud Storage object versioning is not supported!
  string gcs_image_uri = 1;
};

// Client image to perform Vision tasks over.
message Image {
  // Image content, represented as a stream of bytes.
  bytes content = 1 [ctype = CORD];

  // Google Cloud Storage image location. If both 'content' and 'source'
  // are filled for an image, 'content' takes precedence and it will be
  // used for performing the image annotation request.
  ImageSource source = 2;
};

// A bucketized representation of likelihood meant to give our clients highly
// stable results across model upgrades.
enum Likelihood {
  // Unknown likelihood.
  UNKNOWN = 0;

  // The image very unlikely belongs to the vertical specified.
  VERY_UNLIKELY = 1;

  // The image unlikely belongs to the vertical specified.
  UNLIKELY = 2;

  // The image possibly belongs to the vertical specified.
  POSSIBLE = 3;

  // The image likely belongs to the vertical specified.
  LIKELY = 4;

  // The image very likely belongs to the vertical specified.
  VERY_LIKELY = 5;
};

// A face annotation contains the results of face detection.
message FaceAnnotation {
  // The bounding polygon around the face. The coordinates of the bounding box
  // are in the original image's scale, as returned in ImageParams.
  // The bounding box is computed to "frame" the face in accordance with human
  // expectations. It is based on the landmarker results.
  BoundingPoly bounding_poly = 1;

  // This bounding polygon is tighter than the previous
  // <code>boundingPoly</code>, and
  // encloses only the skin part of the face. Typically, it is used to
  // eliminate the face from any image analysis that detects the
  // "amount of skin" visible in an image. It is not based on the
  // landmarker results, only on the initial face detection, hence
  // the <code>fd</code> (face detection) prefix.
  BoundingPoly fd_bounding_poly = 2;

  // A face-specific landmark (for example, a face feature).
  message Landmark {
    // Landmark positions may fall outside the bounds of the image
    // when the face is near one or more edges of the image.
    // Therefore it is NOT guaranteed that 0 <= x < width or 0 <= y < height.

    // Face landmark (feature) type.
    // Left and right are defined from the vantage of the viewer of the image,
    // without considering mirror projections typical of photos. So, LEFT_EYE,
    // typically is the person's right eye.
    enum Type {
      // Unknown face landmark detected. Should not be filled.
      UNKNOWN_LANDMARK = 0;
      // Left eye.
      LEFT_EYE = 1;
      // Right eye.
      RIGHT_EYE = 2;
      // Left of left eyebrow.
      LEFT_OF_LEFT_EYEBROW = 3;
      // Right of left eyebrow.
      RIGHT_OF_LEFT_EYEBROW = 4;
      // Left of right eyebrow.
      LEFT_OF_RIGHT_EYEBROW = 5;
      // Right of right eyebrow.
      RIGHT_OF_RIGHT_EYEBROW = 6;
      // Midpoint between eyes.
      MIDPOINT_BETWEEN_EYES = 7;
      // Nose tip.
      NOSE_TIP = 8;
      // Upper lip.
      UPPER_LIP = 9;
      // Lower lip.
      LOWER_LIP = 10;
      // Mouth left.
      MOUTH_LEFT = 11;
      // Mouth right.
      MOUTH_RIGHT = 12;
      // Mouth center.
      MOUTH_CENTER = 13;
      // Nose, bottom right.
      NOSE_BOTTOM_RIGHT = 14;
      // Nose, bottom left.
      NOSE_BOTTOM_LEFT = 15;
      // Nose, bottom center.
      NOSE_BOTTOM_CENTER = 16;
      // Left eye, top boundary.
      LEFT_EYE_TOP_BOUNDARY = 17;
      // Left eye, right corner.
      LEFT_EYE_RIGHT_CORNER = 18;
      // Left eye, bottom boundary.
      LEFT_EYE_BOTTOM_BOUNDARY = 19;
      // Left eye, left corner.
      LEFT_EYE_LEFT_CORNER = 20;
      // Right eye, top boundary.
      RIGHT_EYE_TOP_BOUNDARY = 21;
      // Right eye, right corner.
      RIGHT_EYE_RIGHT_CORNER = 22;
      // Right eye, bottom boundary.
      RIGHT_EYE_BOTTOM_BOUNDARY = 23;
      // Right eye, left corner.
      RIGHT_EYE_LEFT_CORNER = 24;
      // Left eyebrow, upper midpoint.
      LEFT_EYEBROW_UPPER_MIDPOINT = 25;
      // Right eyebrow, upper midpoint.
      RIGHT_EYEBROW_UPPER_MIDPOINT = 26;
      // Left ear tragion.
      LEFT_EAR_TRAGION = 27;
      // Right ear tragion.
      RIGHT_EAR_TRAGION = 28;
      // Left eye pupil.
      LEFT_EYE_PUPIL = 29;
      // Right eye pupil.
      RIGHT_EYE_PUPIL = 30;
      // Forehead glabella.
      FOREHEAD_GLABELLA = 31;
      // Chin gnathion.
      CHIN_GNATHION = 32;
      // Chin left gonion.
      CHIN_LEFT_GONION = 33;
      // Chin right gonion.
      CHIN_RIGHT_GONION = 34;
    }

    // Face landmark type.
    Type type = 3;

    // Face landmark position.
    Position position = 4;
  }

  // Detected face landmarks.
  repeated Landmark landmarks = 3;

  // Roll angle. Indicates the amount of clockwise/anti-clockwise rotation of
  // the
  // face relative to the image vertical, about the axis perpendicular to the
  // face. Range [-180,180].
  float roll_angle = 4;

  // Yaw angle. Indicates the leftward/rightward angle that the face is
  // pointing, relative to the vertical plane perpendicular to the image. Range
  // [-180,180].
  float pan_angle = 5;

  // Pitch angle. Indicates the upwards/downwards angle that the face is
  // pointing
  // relative to the image's horizontal plane. Range [-180,180].
  float tilt_angle = 6;

  // Detection confidence. Range [0, 1].
  float detection_confidence = 7;

  // Face landmarking confidence. Range [0, 1].
  float landmarking_confidence = 8;

  // START probabilities for various image attributes.

  // Joy likelihood.
  Likelihood joy_likelihood = 9;

  // Sorrow likelihood.
  Likelihood sorrow_likelihood = 10;

  // Anger likelihood.
  Likelihood anger_likelihood = 11;

  // Surprise likelihood.
  Likelihood surprise_likelihood = 12;

  // Under-exposed likelihood.
  Likelihood under_exposed_likelihood = 13;

  // Blurred likelihood.
  Likelihood blurred_likelihood = 14;

  // Headwear likelihood.
  Likelihood headwear_likelihood = 15;

  // END likelihoods for various image attributes.
};

// Detected entity location information.
message LocationInfo {
  // Lat - long location coordinates.
  google.type.LatLng lat_lng = 1;
};

// Arbitrary name/value pair.
message Property {
  // Name of the property.
  string name = 1;

  // Value of the property.
  string value = 2;
};

// Set of detected entity features.
message EntityAnnotation {
  // Knowledge Graph entity ID. Maps to a freebase entity ID.
  // (for example, "Google" maps to: mid /m/045c7b).
  string mid = 1;

  // The language code for the locale in which the entity textual
  // <code>description</code> (next field) is expressed.
  string locale = 2;

  // Entity textual description, expressed in its <code>locale</code> language.
  string description = 3;

  // Overall score of the result. Range [0, 1].
  float score = 4;

  // The accuracy of the entity recognition in an image.
  // For example, for an image containing 'Eiffel Tower,' this field represents
  // the confidence that there is a tower in the query image. Range [0, 1].
  float confidence = 5;

  // The relevancy of the ICA (Image Content Annotation) label to the
  // image. For example, the relevancy of 'tower' to an image containing
  // 'Eiffel Tower' is likely higher than an image containing a distant towering
  // building, though the confidence that there is a tower may be the same.
  // Range [0, 1].
  float topicality = 6;

  // Image region to which this entity belongs.
  BoundingPoly bounding_poly = 7;

  // The location information for the recognized entity. Multiple
  // <code>LocationInfo</code> elements can be present since one location may
  // indicate the location of the scene in the query image, and another the
  // location of the place where the query image was taken. Location information
  // is usually present for landmarks.
  repeated LocationInfo locations = 8;

  // Some entities can have additional optional <code>Property</code> fields.
  // For example a different kind of score or string that qualifies the entity.
  repeated Property properties = 9;
};

// Set of features pertaining to the image, computed by various computer vision
// methods over safe-search verticals (for example, adult, spoof, medical,
// violence).
message SafeSearchAnnotation {
  // Represents the adult contents likelihood for the image.
  Likelihood adult = 1;

  // Spoof likelihood. The likelihood that an obvious modification
  // was made to the image's canonical version to make it appear
  // funny or offensive.
  Likelihood spoof = 2;

  // Likelihood this is a medical image.
  Likelihood medical = 3;

  // Violence likelihood.
  Likelihood violence = 4;

  // Raw scores for safe-search annotations only visibile to clients
  // for small scale experiments (e.g. snapchat will use these raw scores
  // to test calibration of triggering on their end and define a desired
  // bucket resolution for Likelihood). The range is [0.0, 1.0).

  // Raw adult score.
  float adult_score = 5;
  // Raw spoof score.
  float spoof_score = 6;
  // Raw medical score.
  float medical_score = 7;
  // Raw violence score.
  float violence_score = 8;
};

// Rectangle determined by min and max LatLng pairs.
message LatLongRect {
  // Min lat/long pair.
  google.type.LatLng min_lat_lng = 1;

  // Max lat/long pair.
  google.type.LatLng max_lat_lng = 2;
};

// Color information consists of RGB channels, score and fraction of
// image the color occupies in the image.
message ColorInfo {
  // RGB components of the color.
  google.type.Color color = 1;

  // Image-specific score for this color. Value in range [0, 1].
  float score = 2;

  // Stores the fraction of pixels the color occupies in the image.
  // Value in range [0, 1].
  float pixel_fraction = 3;
}

// Set of dominant colors and their corresponding scores.
message DominantColorsAnnotation {
  // RGB color values, with their score and pixel fraction.
  repeated ColorInfo colors = 1;
}

// Stores image properties (e.g. dominant colors).
message ImageProperties {
  // If present, dominant colors completed successfully.
  DominantColorsAnnotation dominant_colors = 1;
}

// Image context.
message ImageContext {
  // Lat/long rectangle that specifies the location of the image.
  LatLongRect lat_long_rect = 1;

  // List of languages to use for TEXT_DETECTION. In most cases, an empty value
  // will yield the best results as it will allow text detection to
  // automatically detect the text language. For languages based on the latin
  // alphabet a hint is not needed. In rare cases, when the language of
  // the text in the image is known in advance, setting this hint will help get
  // better results (although it will hurt a great deal if the hint is wrong).
  // Text detection will return an error if one or more of the languages
  // specified here are not supported. The exact list of supported languages are
  // specified here:
  // https://cloud.google.com/translate/v2/using_rest#language-params
  repeated string language_hints = 2;
};

// Request for performing Vision tasks over a user-provided image, with
// user-requested features.
message AnnotateImageRequest {
  // The image to be processed.
  Image image = 1;

  // Requested features.
  repeated Feature features = 2;

  // Additional context that may accompany the image.
  ImageContext image_context = 3;
};

// Response to an image annotation request.
message AnnotateImageResponse {
  // If present, face detection completed successfully.
  repeated FaceAnnotation face_annotations = 1;

  // If present, landmark detection completed successfully.
  repeated EntityAnnotation landmark_annotations = 2;

  // If present, logo detection completed successfully.
  repeated EntityAnnotation logo_annotations = 3;

  // If present, label detection completed successfully.
  repeated EntityAnnotation label_annotations = 4;

  // If present, text (OCR) detection completed successfully.
  repeated EntityAnnotation text_annotations = 5;

  // If present, safe-search annotation completed successfully.
  SafeSearchAnnotation safe_search_annotation = 6;

  // If present, image properties were extracted successfully.
  ImageProperties image_properties_annotation = 8;

  // If set, represents the error message for the operation.
  // Note that filled-in mage annotations are guaranteed to be
  // correct, even when <code>error</code> is non-empty.
  google.rpc.Status error = 9;
};

// Multiple image annotation requests are batched into a single service call.
message BatchAnnotateImagesRequest {
  // Individual image annotation requests for this batch.
  repeated AnnotateImageRequest requests = 1;

  // User for this batch annotate image request.
  string user = 2;
};

// Response to a batch image annotation request.
message BatchAnnotateImagesResponse {
  // Individual responses to image annotation requests within the batch.
  repeated AnnotateImageResponse responses = 1;
};
