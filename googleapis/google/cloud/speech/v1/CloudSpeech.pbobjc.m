// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/speech/v1/cloud_speech.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "google/cloud/speech/v1/CloudSpeech.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "google/rpc/Status.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - CloudSpeechRoot

@implementation CloudSpeechRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
    [registry addExtensions:[StatusRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - CloudSpeechRoot_FileDescriptor

static GPBFileDescriptor *CloudSpeechRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.speech.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RecognizeRequest

@implementation RecognizeRequest

@dynamic hasInitialRequest, initialRequest;
@dynamic hasAudioRequest, audioRequest;

typedef struct RecognizeRequest__storage_ {
  uint32_t _has_storage_[1];
  InitialRecognizeRequest *initialRequest;
  AudioRequest *audioRequest;
} RecognizeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "initialRequest",
        .number = RecognizeRequest_FieldNumber_InitialRequest,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RecognizeRequest__storage_, initialRequest),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(InitialRecognizeRequest),
        .fieldOptions = NULL,
      },
      {
        .name = "audioRequest",
        .number = RecognizeRequest_FieldNumber_AudioRequest,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RecognizeRequest__storage_, audioRequest),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(AudioRequest),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecognizeRequest class]
                                     rootClass:[CloudSpeechRoot class]
                                          file:CloudSpeechRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RecognizeRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InitialRecognizeRequest

@implementation InitialRecognizeRequest

@dynamic encoding;
@dynamic sampleRate;
@dynamic languageCode;
@dynamic maxAlternatives;
@dynamic profanityFilter;
@dynamic continuous;
@dynamic interimResults;
@dynamic enableEndpointerEvents;

typedef struct InitialRecognizeRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL profanityFilter;
  BOOL continuous;
  BOOL interimResults;
  BOOL enableEndpointerEvents;
  InitialRecognizeRequest_AudioEncoding encoding;
  int32_t sampleRate;
  int32_t maxAlternatives;
  NSString *languageCode;
} InitialRecognizeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "encoding",
        .number = InitialRecognizeRequest_FieldNumber_Encoding,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(InitialRecognizeRequest__storage_, encoding),
        .defaultValue.valueEnum = InitialRecognizeRequest_AudioEncoding_EncodingUnspecified,
        .dataTypeSpecific.enumDescFunc = InitialRecognizeRequest_AudioEncoding_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "sampleRate",
        .number = InitialRecognizeRequest_FieldNumber_SampleRate,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(InitialRecognizeRequest__storage_, sampleRate),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "languageCode",
        .number = InitialRecognizeRequest_FieldNumber_LanguageCode,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(InitialRecognizeRequest__storage_, languageCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "maxAlternatives",
        .number = InitialRecognizeRequest_FieldNumber_MaxAlternatives,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(InitialRecognizeRequest__storage_, maxAlternatives),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "profanityFilter",
        .number = InitialRecognizeRequest_FieldNumber_ProfanityFilter,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(InitialRecognizeRequest__storage_, profanityFilter),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "continuous",
        .number = InitialRecognizeRequest_FieldNumber_Continuous,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(InitialRecognizeRequest__storage_, continuous),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "interimResults",
        .number = InitialRecognizeRequest_FieldNumber_InterimResults,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(InitialRecognizeRequest__storage_, interimResults),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "enableEndpointerEvents",
        .number = InitialRecognizeRequest_FieldNumber_EnableEndpointerEvents,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(InitialRecognizeRequest__storage_, enableEndpointerEvents),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = InitialRecognizeRequest_AudioEncoding_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InitialRecognizeRequest class]
                                     rootClass:[CloudSpeechRoot class]
                                          file:CloudSpeechRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(InitialRecognizeRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t InitialRecognizeRequest_Encoding_RawValue(InitialRecognizeRequest *message) {
  GPBDescriptor *descriptor = [InitialRecognizeRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InitialRecognizeRequest_FieldNumber_Encoding];
  return GPBGetMessageInt32Field(message, field);
}

void SetInitialRecognizeRequest_Encoding_RawValue(InitialRecognizeRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [InitialRecognizeRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InitialRecognizeRequest_FieldNumber_Encoding];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum InitialRecognizeRequest_AudioEncoding

GPBEnumDescriptor *InitialRecognizeRequest_AudioEncoding_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "EncodingUnspecified", .number = InitialRecognizeRequest_AudioEncoding_EncodingUnspecified },
      { .name = "Linear16", .number = InitialRecognizeRequest_AudioEncoding_Linear16 },
      { .name = "Flac", .number = InitialRecognizeRequest_AudioEncoding_Flac },
      { .name = "Mulaw", .number = InitialRecognizeRequest_AudioEncoding_Mulaw },
      { .name = "Amr", .number = InitialRecognizeRequest_AudioEncoding_Amr },
      { .name = "AmrWb", .number = InitialRecognizeRequest_AudioEncoding_AmrWb },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(InitialRecognizeRequest_AudioEncoding)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:InitialRecognizeRequest_AudioEncoding_IsValidValue];
  }
  return descriptor;
}

BOOL InitialRecognizeRequest_AudioEncoding_IsValidValue(int32_t value__) {
  switch (value__) {
    case InitialRecognizeRequest_AudioEncoding_EncodingUnspecified:
    case InitialRecognizeRequest_AudioEncoding_Linear16:
    case InitialRecognizeRequest_AudioEncoding_Flac:
    case InitialRecognizeRequest_AudioEncoding_Mulaw:
    case InitialRecognizeRequest_AudioEncoding_Amr:
    case InitialRecognizeRequest_AudioEncoding_AmrWb:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - AudioRequest

@implementation AudioRequest

@dynamic content;

typedef struct AudioRequest__storage_ {
  uint32_t _has_storage_[1];
  NSData *content;
} AudioRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .number = AudioRequest_FieldNumber_Content,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
        .offset = offsetof(AudioRequest__storage_, content),
        .defaultValue.valueData = nil,
        .dataTypeSpecific.className = NULL,
      #if GPBOBJC_INCLUDE_FIELD_OPTIONS
        .fieldOptions = "\000\000\000\002\010\001",
      #else
        .fieldOptions = NULL,
      #endif  // GPBOBJC_INCLUDE_FIELD_OPTIONS
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioRequest class]
                                     rootClass:[CloudSpeechRoot class]
                                          file:CloudSpeechRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AudioRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NonStreamingRecognizeResponse

@implementation NonStreamingRecognizeResponse

@dynamic responsesArray, responsesArray_Count;

typedef struct NonStreamingRecognizeResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *responsesArray;
} NonStreamingRecognizeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "responsesArray",
        .number = NonStreamingRecognizeResponse_FieldNumber_ResponsesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(NonStreamingRecognizeResponse__storage_, responsesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(RecognizeResponse),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NonStreamingRecognizeResponse class]
                                     rootClass:[CloudSpeechRoot class]
                                          file:CloudSpeechRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(NonStreamingRecognizeResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecognizeResponse

@implementation RecognizeResponse

@dynamic hasError, error;
@dynamic resultsArray, resultsArray_Count;
@dynamic resultIndex;
@dynamic endpoint;

typedef struct RecognizeResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t resultIndex;
  RecognizeResponse_EndpointerEvent endpoint;
  Status *error;
  NSMutableArray *resultsArray;
} RecognizeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RecognizeResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RecognizeResponse__storage_, error),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Status),
        .fieldOptions = NULL,
      },
      {
        .name = "resultsArray",
        .number = RecognizeResponse_FieldNumber_ResultsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RecognizeResponse__storage_, resultsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(SpeechRecognitionResult),
        .fieldOptions = NULL,
      },
      {
        .name = "resultIndex",
        .number = RecognizeResponse_FieldNumber_ResultIndex,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(RecognizeResponse__storage_, resultIndex),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "endpoint",
        .number = RecognizeResponse_FieldNumber_Endpoint,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RecognizeResponse__storage_, endpoint),
        .defaultValue.valueEnum = RecognizeResponse_EndpointerEvent_EndpointerEventUnspecified,
        .dataTypeSpecific.enumDescFunc = RecognizeResponse_EndpointerEvent_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = RecognizeResponse_EndpointerEvent_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecognizeResponse class]
                                     rootClass:[CloudSpeechRoot class]
                                          file:CloudSpeechRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RecognizeResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RecognizeResponse_Endpoint_RawValue(RecognizeResponse *message) {
  GPBDescriptor *descriptor = [RecognizeResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RecognizeResponse_FieldNumber_Endpoint];
  return GPBGetMessageInt32Field(message, field);
}

void SetRecognizeResponse_Endpoint_RawValue(RecognizeResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RecognizeResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RecognizeResponse_FieldNumber_Endpoint];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RecognizeResponse_EndpointerEvent

GPBEnumDescriptor *RecognizeResponse_EndpointerEvent_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "EndpointerEventUnspecified", .number = RecognizeResponse_EndpointerEvent_EndpointerEventUnspecified },
      { .name = "StartOfSpeech", .number = RecognizeResponse_EndpointerEvent_StartOfSpeech },
      { .name = "EndOfSpeech", .number = RecognizeResponse_EndpointerEvent_EndOfSpeech },
      { .name = "EndOfAudio", .number = RecognizeResponse_EndpointerEvent_EndOfAudio },
      { .name = "EndOfUtterance", .number = RecognizeResponse_EndpointerEvent_EndOfUtterance },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RecognizeResponse_EndpointerEvent)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:RecognizeResponse_EndpointerEvent_IsValidValue];
  }
  return descriptor;
}

BOOL RecognizeResponse_EndpointerEvent_IsValidValue(int32_t value__) {
  switch (value__) {
    case RecognizeResponse_EndpointerEvent_EndpointerEventUnspecified:
    case RecognizeResponse_EndpointerEvent_StartOfSpeech:
    case RecognizeResponse_EndpointerEvent_EndOfSpeech:
    case RecognizeResponse_EndpointerEvent_EndOfAudio:
    case RecognizeResponse_EndpointerEvent_EndOfUtterance:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SpeechRecognitionResult

@implementation SpeechRecognitionResult

@dynamic alternativesArray, alternativesArray_Count;
@dynamic isFinal;
@dynamic stability;

typedef struct SpeechRecognitionResult__storage_ {
  uint32_t _has_storage_[1];
  BOOL isFinal;
  float stability;
  NSMutableArray *alternativesArray;
} SpeechRecognitionResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alternativesArray",
        .number = SpeechRecognitionResult_FieldNumber_AlternativesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(SpeechRecognitionResult__storage_, alternativesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(SpeechRecognitionAlternative),
        .fieldOptions = NULL,
      },
      {
        .name = "isFinal",
        .number = SpeechRecognitionResult_FieldNumber_IsFinal,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(SpeechRecognitionResult__storage_, isFinal),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "stability",
        .number = SpeechRecognitionResult_FieldNumber_Stability,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(SpeechRecognitionResult__storage_, stability),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpeechRecognitionResult class]
                                     rootClass:[CloudSpeechRoot class]
                                          file:CloudSpeechRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SpeechRecognitionResult__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SpeechRecognitionAlternative

@implementation SpeechRecognitionAlternative

@dynamic transcript;
@dynamic confidence;

typedef struct SpeechRecognitionAlternative__storage_ {
  uint32_t _has_storage_[1];
  float confidence;
  NSString *transcript;
} SpeechRecognitionAlternative__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transcript",
        .number = SpeechRecognitionAlternative_FieldNumber_Transcript,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SpeechRecognitionAlternative__storage_, transcript),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "confidence",
        .number = SpeechRecognitionAlternative_FieldNumber_Confidence,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(SpeechRecognitionAlternative__storage_, confidence),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SpeechRecognitionAlternative class]
                                     rootClass:[CloudSpeechRoot class]
                                          file:CloudSpeechRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SpeechRecognitionAlternative__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
