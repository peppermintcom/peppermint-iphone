// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/rpc/code.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "google/rpc/Code.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - CodeRoot

@implementation CodeRoot

@end

#pragma mark - Enum Code

GPBEnumDescriptor *Code_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Ok", .number = Code_Ok },
      { .name = "Cancelled", .number = Code_Cancelled },
      { .name = "Unknown", .number = Code_Unknown },
      { .name = "InvalidArgument", .number = Code_InvalidArgument },
      { .name = "DeadlineExceeded", .number = Code_DeadlineExceeded },
      { .name = "NotFound", .number = Code_NotFound },
      { .name = "AlreadyExists", .number = Code_AlreadyExists },
      { .name = "PermissionDenied", .number = Code_PermissionDenied },
      { .name = "Unauthenticated", .number = Code_Unauthenticated },
      { .name = "ResourceExhausted", .number = Code_ResourceExhausted },
      { .name = "FailedPrecondition", .number = Code_FailedPrecondition },
      { .name = "Aborted", .number = Code_Aborted },
      { .name = "OutOfRange", .number = Code_OutOfRange },
      { .name = "Unimplemented", .number = Code_Unimplemented },
      { .name = "Internal", .number = Code_Internal },
      { .name = "Unavailable", .number = Code_Unavailable },
      { .name = "DataLoss", .number = Code_DataLoss },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Code)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:Code_IsValidValue];
  }
  return descriptor;
}

BOOL Code_IsValidValue(int32_t value__) {
  switch (value__) {
    case Code_Ok:
    case Code_Cancelled:
    case Code_Unknown:
    case Code_InvalidArgument:
    case Code_DeadlineExceeded:
    case Code_NotFound:
    case Code_AlreadyExists:
    case Code_PermissionDenied:
    case Code_Unauthenticated:
    case Code_ResourceExhausted:
    case Code_FailedPrecondition:
    case Code_Aborted:
    case Code_OutOfRange:
    case Code_Unimplemented:
    case Code_Internal:
    case Code_Unavailable:
    case Code_DataLoss:
      return YES;
    default:
      return NO;
  }
}


// @@protoc_insertion_point(global_scope)
