// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1beta3/datastore.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30000
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

CF_EXTERN_C_BEGIN

@class Entity;
@class GqlQuery;
@class Key;
@class PartitionId;
@class Query;
@class QueryResultBatch;
@class ReadOptions;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum CommitRequest_Mode

// Commit modes.
typedef GPB_ENUM(CommitRequest_Mode) {
  CommitRequest_Mode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // Unspecified.
  CommitRequest_Mode_ModeUnspecified = 0,

  // Transactional.
  CommitRequest_Mode_Transactional = 1,

  // Non-transactional.
  CommitRequest_Mode_NonTransactional = 2,
};

GPBEnumDescriptor *CommitRequest_Mode_EnumDescriptor(void);

BOOL CommitRequest_Mode_IsValidValue(int32_t value);

#pragma mark - Enum ReadOptions_ReadConsistency

// Read consistencies.
typedef GPB_ENUM(ReadOptions_ReadConsistency) {
  ReadOptions_ReadConsistency_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // Unspecified.
  ReadOptions_ReadConsistency_ReadConsistencyUnspecified = 0,

  // Strong consistency.
  ReadOptions_ReadConsistency_Strong = 1,

  // Eventual consistency.
  ReadOptions_ReadConsistency_Eventual = 2,
};

GPBEnumDescriptor *ReadOptions_ReadConsistency_EnumDescriptor(void);

BOOL ReadOptions_ReadConsistency_IsValidValue(int32_t value);

#pragma mark - DatastoreRoot

@interface DatastoreRoot : GPBRootObject

// The base class provides:
//   + (GPBExtensionRegistry *)extensionRegistry;
// which is an GPBExtensionRegistry that includes all the extensions defined by
// this file and all files that it depends on.

@end

#pragma mark - LookupRequest

typedef GPB_ENUM(LookupRequest_FieldNumber) {
  LookupRequest_FieldNumber_ReadOptions = 1,
  LookupRequest_FieldNumber_KeysArray = 3,
  LookupRequest_FieldNumber_ProjectId = 8,
};

// The request for [google.datastore.v1beta3.Datastore.Lookup][google.datastore.v1beta3.Datastore.Lookup].
@interface LookupRequest : GPBMessage

// Project ID against which to make the request.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

// Options for this lookup request.
@property(nonatomic, readwrite) BOOL hasReadOptions;
@property(nonatomic, readwrite, strong, null_resettable) ReadOptions *readOptions;

// Keys of entities to look up.
// |keysArray| contains |Key|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *keysArray;
@property(nonatomic, readonly) NSUInteger keysArray_Count;

@end

#pragma mark - LookupResponse

typedef GPB_ENUM(LookupResponse_FieldNumber) {
  LookupResponse_FieldNumber_FoundArray = 1,
  LookupResponse_FieldNumber_MissingArray = 2,
  LookupResponse_FieldNumber_DeferredArray = 3,
};

// The response for [google.datastore.v1beta3.Datastore.Lookup][google.datastore.v1beta3.Datastore.Lookup].
@interface LookupResponse : GPBMessage

// Entities found as `ResultType.FULL` entities. The order of results in this
// field is undefined and has no relation to the order of the keys in the
// input.
// |foundArray| contains |EntityResult|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *foundArray;
@property(nonatomic, readonly) NSUInteger foundArray_Count;

// Entities not found as `ResultType.KEY_ONLY` entities. The order of results
// in this field is undefined and has no relation to the order of the keys
// in the input.
// |missingArray| contains |EntityResult|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *missingArray;
@property(nonatomic, readonly) NSUInteger missingArray_Count;

// A list of keys that were not looked up due to resource constraints. The
// order of results in this field is undefined and has no relation to the
// order of the keys in the input.
// |deferredArray| contains |Key|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *deferredArray;
@property(nonatomic, readonly) NSUInteger deferredArray_Count;

@end

#pragma mark - RunQueryRequest

typedef GPB_ENUM(RunQueryRequest_FieldNumber) {
  RunQueryRequest_FieldNumber_ReadOptions = 1,
  RunQueryRequest_FieldNumber_PartitionId = 2,
  RunQueryRequest_FieldNumber_Query = 3,
  RunQueryRequest_FieldNumber_GqlQuery = 7,
  RunQueryRequest_FieldNumber_ProjectId = 8,
};

typedef GPB_ENUM(RunQueryRequest_QueryType_OneOfCase) {
  RunQueryRequest_QueryType_OneOfCase_GPBUnsetOneOfCase = 0,
  RunQueryRequest_QueryType_OneOfCase_Query = 3,
  RunQueryRequest_QueryType_OneOfCase_GqlQuery = 7,
};

// The request for [google.datastore.v1beta3.Datastore.RunQuery][google.datastore.v1beta3.Datastore.RunQuery].
@interface RunQueryRequest : GPBMessage

// Project ID against which to make the request.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

// Entities are partitioned into subsets, identified by a partition ID.
// Queries are scoped to a single partition.
// This partition ID is normalized with the standard default context
// partition ID.
@property(nonatomic, readwrite) BOOL hasPartitionId;
@property(nonatomic, readwrite, strong, null_resettable) PartitionId *partitionId;

// The options for this query.
@property(nonatomic, readwrite) BOOL hasReadOptions;
@property(nonatomic, readwrite, strong, null_resettable) ReadOptions *readOptions;

// The type of query.
@property(nonatomic, readonly) RunQueryRequest_QueryType_OneOfCase queryTypeOneOfCase;

// The query to run.
@property(nonatomic, readwrite, strong, null_resettable) Query *query;

// The GQL query to run.
@property(nonatomic, readwrite, strong, null_resettable) GqlQuery *gqlQuery;

@end

void RunQueryRequest_ClearQueryTypeOneOfCase(RunQueryRequest *message);

#pragma mark - RunQueryResponse

typedef GPB_ENUM(RunQueryResponse_FieldNumber) {
  RunQueryResponse_FieldNumber_Batch = 1,
  RunQueryResponse_FieldNumber_Query = 2,
};

// The response for [google.datastore.v1beta3.Datastore.RunQuery][google.datastore.v1beta3.Datastore.RunQuery].
@interface RunQueryResponse : GPBMessage

// A batch of query results (always present).
@property(nonatomic, readwrite) BOOL hasBatch;
@property(nonatomic, readwrite, strong, null_resettable) QueryResultBatch *batch;

// The parsed form of the `GqlQuery` from the request, if it was set.
@property(nonatomic, readwrite) BOOL hasQuery;
@property(nonatomic, readwrite, strong, null_resettable) Query *query;

@end

#pragma mark - BeginTransactionRequest

typedef GPB_ENUM(BeginTransactionRequest_FieldNumber) {
  BeginTransactionRequest_FieldNumber_ProjectId = 8,
};

// The request for [google.datastore.v1beta3.Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
@interface BeginTransactionRequest : GPBMessage

// Project ID against which to make the request.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

@end

#pragma mark - BeginTransactionResponse

typedef GPB_ENUM(BeginTransactionResponse_FieldNumber) {
  BeginTransactionResponse_FieldNumber_Transaction = 1,
};

// The response for [google.datastore.v1beta3.Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
@interface BeginTransactionResponse : GPBMessage

// The transaction identifier (always present).
@property(nonatomic, readwrite, copy, null_resettable) NSData *transaction;

@end

#pragma mark - RollbackRequest

typedef GPB_ENUM(RollbackRequest_FieldNumber) {
  RollbackRequest_FieldNumber_Transaction = 1,
  RollbackRequest_FieldNumber_ProjectId = 8,
};

// The request for [google.datastore.v1beta3.Datastore.Rollback][google.datastore.v1beta3.Datastore.Rollback].
@interface RollbackRequest : GPBMessage

// Project ID against which to make the request.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

// The transaction identifier, returned by a call to
// [google.datastore.v1beta3.Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
@property(nonatomic, readwrite, copy, null_resettable) NSData *transaction;

@end

#pragma mark - RollbackResponse

// The response for [google.datastore.v1beta3.Datastore.Rollback][google.datastore.v1beta3.Datastore.Rollback]
// (an empty message).
@interface RollbackResponse : GPBMessage

@end

#pragma mark - CommitRequest

typedef GPB_ENUM(CommitRequest_FieldNumber) {
  CommitRequest_FieldNumber_Transaction = 1,
  CommitRequest_FieldNumber_Mode = 5,
  CommitRequest_FieldNumber_MutationsArray = 6,
  CommitRequest_FieldNumber_ProjectId = 8,
};

typedef GPB_ENUM(CommitRequest_TransactionSelector_OneOfCase) {
  CommitRequest_TransactionSelector_OneOfCase_GPBUnsetOneOfCase = 0,
  CommitRequest_TransactionSelector_OneOfCase_Transaction = 1,
};

// The request for [google.datastore.v1beta3.Datastore.Commit][google.datastore.v1beta3.Datastore.Commit].
@interface CommitRequest : GPBMessage

// Project ID against which to make the request.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

// The type of commit to perform. Defaults to `TRANSACTIONAL`.
@property(nonatomic, readwrite) CommitRequest_Mode mode;

// Must be set when mode is `TRANSACTIONAL`.
@property(nonatomic, readonly) CommitRequest_TransactionSelector_OneOfCase transactionSelectorOneOfCase;

// The transaction in which to write.
@property(nonatomic, readwrite, copy, null_resettable) NSData *transaction;

// The mutations to perform.
//
// When mode is `TRANSACTIONAL`, mutations affecting a single entity are
// applied in order. The following sequences of mutations affecting a single
// entity are not permitted in a single `Commit` request:
// - `insert` followed by `insert`
// - `update` followed by `insert`
// - `upsert` followed by `insert`
// - `delete` followed by `update`
//
// When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single
// entity.
// |mutationsArray| contains |Mutation|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *mutationsArray;
@property(nonatomic, readonly) NSUInteger mutationsArray_Count;

@end

int32_t CommitRequest_Mode_RawValue(CommitRequest *message);
void SetCommitRequest_Mode_RawValue(CommitRequest *message, int32_t value);

void CommitRequest_ClearTransactionSelectorOneOfCase(CommitRequest *message);

#pragma mark - CommitResponse

typedef GPB_ENUM(CommitResponse_FieldNumber) {
  CommitResponse_FieldNumber_MutationResultsArray = 3,
  CommitResponse_FieldNumber_IndexUpdates = 4,
};

// The response for [google.datastore.v1beta3.Datastore.Commit][google.datastore.v1beta3.Datastore.Commit].
@interface CommitResponse : GPBMessage

// The result of performing the mutations.
// The i-th mutation result corresponds to the i-th mutation in the request.
// |mutationResultsArray| contains |MutationResult|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *mutationResultsArray;
@property(nonatomic, readonly) NSUInteger mutationResultsArray_Count;

// The number of index entries updated during the commit.
@property(nonatomic, readwrite) int32_t indexUpdates;

@end

#pragma mark - AllocateIdsRequest

typedef GPB_ENUM(AllocateIdsRequest_FieldNumber) {
  AllocateIdsRequest_FieldNumber_KeysArray = 1,
  AllocateIdsRequest_FieldNumber_ProjectId = 8,
};

// The request for [google.datastore.v1beta3.Datastore.AllocateIds][google.datastore.v1beta3.Datastore.AllocateIds].
@interface AllocateIdsRequest : GPBMessage

// Project ID against which to make the request.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

// A list of keys with incomplete key paths for which to allocate IDs.
// No key may be reserved/read-only.
// |keysArray| contains |Key|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *keysArray;
@property(nonatomic, readonly) NSUInteger keysArray_Count;

@end

#pragma mark - AllocateIdsResponse

typedef GPB_ENUM(AllocateIdsResponse_FieldNumber) {
  AllocateIdsResponse_FieldNumber_KeysArray = 1,
};

// The response for [google.datastore.v1beta3.Datastore.AllocateIds][google.datastore.v1beta3.Datastore.AllocateIds].
@interface AllocateIdsResponse : GPBMessage

// The keys specified in the request (in the same order), each with
// its key path completed with a newly allocated ID.
// |keysArray| contains |Key|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *keysArray;
@property(nonatomic, readonly) NSUInteger keysArray_Count;

@end

#pragma mark - Mutation

typedef GPB_ENUM(Mutation_FieldNumber) {
  Mutation_FieldNumber_Insert = 4,
  Mutation_FieldNumber_Update = 5,
  Mutation_FieldNumber_Upsert = 6,
  Mutation_FieldNumber_Delete_p = 7,
};

typedef GPB_ENUM(Mutation_Operation_OneOfCase) {
  Mutation_Operation_OneOfCase_GPBUnsetOneOfCase = 0,
  Mutation_Operation_OneOfCase_Insert = 4,
  Mutation_Operation_OneOfCase_Update = 5,
  Mutation_Operation_OneOfCase_Upsert = 6,
  Mutation_Operation_OneOfCase_Delete_p = 7,
};

// A mutation to apply to an entity.
@interface Mutation : GPBMessage

// The mutation operation.
//
// For `insert`, `update`, and `upsert`:
// - The entity's key must not be reserved/read-only.
// - No property in the entity may have a reserved name,
//   not even a property in an entity in a value.
// - No value in the entity may have meaning 18,
//   not even a value in an entity in another value.
@property(nonatomic, readonly) Mutation_Operation_OneOfCase operationOneOfCase;

// The entity to insert. The entity must not already exist.
// The entity's key's final path element may be incomplete.
@property(nonatomic, readwrite, strong, null_resettable) Entity *insert;

// The entity to update. The entity must already exist.
// Must have a complete key path.
@property(nonatomic, readwrite, strong, null_resettable) Entity *update;

// The entity to upsert. The entity may or may not already exist.
// The entity's key's final path element may be incomplete.
@property(nonatomic, readwrite, strong, null_resettable) Entity *upsert;

// The key of the entity to delete. The entity may or may not already exist.
// Must have a complete key path and must not be reserved/read-only.
@property(nonatomic, readwrite, strong, null_resettable) Key *delete_p;

@end

void Mutation_ClearOperationOneOfCase(Mutation *message);

#pragma mark - MutationResult

typedef GPB_ENUM(MutationResult_FieldNumber) {
  MutationResult_FieldNumber_Key = 3,
};

// The result of applying a mutation.
@interface MutationResult : GPBMessage

// The automatically allocated key.
// Set only when the mutation allocated a key.
@property(nonatomic, readwrite) BOOL hasKey;
@property(nonatomic, readwrite, strong, null_resettable) Key *key;

@end

#pragma mark - ReadOptions

typedef GPB_ENUM(ReadOptions_FieldNumber) {
  ReadOptions_FieldNumber_ReadConsistency = 1,
  ReadOptions_FieldNumber_Transaction = 2,
};

typedef GPB_ENUM(ReadOptions_ConsistencyType_OneOfCase) {
  ReadOptions_ConsistencyType_OneOfCase_GPBUnsetOneOfCase = 0,
  ReadOptions_ConsistencyType_OneOfCase_ReadConsistency = 1,
  ReadOptions_ConsistencyType_OneOfCase_Transaction = 2,
};

// Options shared by read requests.
@interface ReadOptions : GPBMessage

// If not specified, lookups and ancestor queries default to
// `read_consistency`=`STRONG`, global queries default to
// `read_consistency`=`EVENTUAL`.
@property(nonatomic, readonly) ReadOptions_ConsistencyType_OneOfCase consistencyTypeOneOfCase;

// The non-transactional read consistency to use.
// Cannot be set to `STRONG` for global queries.
@property(nonatomic, readwrite) ReadOptions_ReadConsistency readConsistency;

// The transaction in which to read.
@property(nonatomic, readwrite, copy, null_resettable) NSData *transaction;

@end

int32_t ReadOptions_ReadConsistency_RawValue(ReadOptions *message);
void SetReadOptions_ReadConsistency_RawValue(ReadOptions *message, int32_t value);

void ReadOptions_ClearConsistencyTypeOneOfCase(ReadOptions *message);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

// @@protoc_insertion_point(global_scope)
