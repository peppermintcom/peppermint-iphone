// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1beta3/query.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "google/datastore/v1beta3/Query.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "google/datastore/v1beta3/Entity.pbobjc.h"
#import "google/protobuf/Wrappers.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - QueryRoot

@implementation QueryRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
    [registry addExtensions:[EntityRoot extensionRegistry]];
    [registry addExtensions:[GPBWrappersRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - QueryRoot_FileDescriptor

static GPBFileDescriptor *QueryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.datastore.v1beta3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - EntityResult

@implementation EntityResult

@dynamic hasEntity, entity;
@dynamic cursor;

typedef struct EntityResult__storage_ {
  uint32_t _has_storage_[1];
  Entity *entity;
  NSData *cursor;
} EntityResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entity",
        .number = EntityResult_FieldNumber_Entity,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(EntityResult__storage_, entity),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Entity),
        .fieldOptions = NULL,
      },
      {
        .name = "cursor",
        .number = EntityResult_FieldNumber_Cursor,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
        .offset = offsetof(EntityResult__storage_, cursor),
        .defaultValue.valueData = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = EntityResult_ResultType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EntityResult class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(EntityResult__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum EntityResult_ResultType

GPBEnumDescriptor *EntityResult_ResultType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "ResultTypeUnspecified", .number = EntityResult_ResultType_ResultTypeUnspecified },
      { .name = "Full", .number = EntityResult_ResultType_Full },
      { .name = "Projection", .number = EntityResult_ResultType_Projection },
      { .name = "KeyOnly", .number = EntityResult_ResultType_KeyOnly },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(EntityResult_ResultType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:EntityResult_ResultType_IsValidValue];
  }
  return descriptor;
}

BOOL EntityResult_ResultType_IsValidValue(int32_t value__) {
  switch (value__) {
    case EntityResult_ResultType_ResultTypeUnspecified:
    case EntityResult_ResultType_Full:
    case EntityResult_ResultType_Projection:
    case EntityResult_ResultType_KeyOnly:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Query

@implementation Query

@dynamic projectionArray, projectionArray_Count;
@dynamic kindArray, kindArray_Count;
@dynamic hasFilter, filter;
@dynamic orderArray, orderArray_Count;
@dynamic distinctOnArray, distinctOnArray_Count;
@dynamic startCursor;
@dynamic endCursor;
@dynamic offset;
@dynamic hasLimit, limit;

typedef struct Query__storage_ {
  uint32_t _has_storage_[1];
  int32_t offset;
  NSMutableArray *projectionArray;
  NSMutableArray *kindArray;
  Filter *filter;
  NSMutableArray *orderArray;
  NSMutableArray *distinctOnArray;
  NSData *startCursor;
  NSData *endCursor;
  GPBInt32Value *limit;
} Query__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "projectionArray",
        .number = Query_FieldNumber_ProjectionArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Query__storage_, projectionArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Projection),
        .fieldOptions = NULL,
      },
      {
        .name = "kindArray",
        .number = Query_FieldNumber_KindArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Query__storage_, kindArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(KindExpression),
        .fieldOptions = NULL,
      },
      {
        .name = "filter",
        .number = Query_FieldNumber_Filter,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Query__storage_, filter),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Filter),
        .fieldOptions = NULL,
      },
      {
        .name = "orderArray",
        .number = Query_FieldNumber_OrderArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Query__storage_, orderArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(PropertyOrder),
        .fieldOptions = NULL,
      },
      {
        .name = "distinctOnArray",
        .number = Query_FieldNumber_DistinctOnArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Query__storage_, distinctOnArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(PropertyReference),
        .fieldOptions = NULL,
      },
      {
        .name = "startCursor",
        .number = Query_FieldNumber_StartCursor,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
        .offset = offsetof(Query__storage_, startCursor),
        .defaultValue.valueData = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "endCursor",
        .number = Query_FieldNumber_EndCursor,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
        .offset = offsetof(Query__storage_, endCursor),
        .defaultValue.valueData = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "offset",
        .number = Query_FieldNumber_Offset,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(Query__storage_, offset),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "limit",
        .number = Query_FieldNumber_Limit,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Query__storage_, limit),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt32Value),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Query class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Query__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KindExpression

@implementation KindExpression

@dynamic name;

typedef struct KindExpression__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} KindExpression__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .number = KindExpression_FieldNumber_Name,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(KindExpression__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KindExpression class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(KindExpression__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PropertyReference

@implementation PropertyReference

@dynamic name;

typedef struct PropertyReference__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} PropertyReference__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .number = PropertyReference_FieldNumber_Name,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(PropertyReference__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PropertyReference class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PropertyReference__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Projection

@implementation Projection

@dynamic hasProperty, property;

typedef struct Projection__storage_ {
  uint32_t _has_storage_[1];
  PropertyReference *property;
} Projection__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "property",
        .number = Projection_FieldNumber_Property,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Projection__storage_, property),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(PropertyReference),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Projection class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Projection__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PropertyOrder

@implementation PropertyOrder

@dynamic hasProperty, property;
@dynamic direction;

typedef struct PropertyOrder__storage_ {
  uint32_t _has_storage_[1];
  PropertyOrder_Direction direction;
  PropertyReference *property;
} PropertyOrder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "property",
        .number = PropertyOrder_FieldNumber_Property,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PropertyOrder__storage_, property),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(PropertyReference),
        .fieldOptions = NULL,
      },
      {
        .name = "direction",
        .number = PropertyOrder_FieldNumber_Direction,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(PropertyOrder__storage_, direction),
        .defaultValue.valueEnum = PropertyOrder_Direction_DirectionUnspecified,
        .dataTypeSpecific.enumDescFunc = PropertyOrder_Direction_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = PropertyOrder_Direction_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PropertyOrder class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PropertyOrder__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PropertyOrder_Direction_RawValue(PropertyOrder *message) {
  GPBDescriptor *descriptor = [PropertyOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PropertyOrder_FieldNumber_Direction];
  return GPBGetMessageInt32Field(message, field);
}

void SetPropertyOrder_Direction_RawValue(PropertyOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [PropertyOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PropertyOrder_FieldNumber_Direction];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum PropertyOrder_Direction

GPBEnumDescriptor *PropertyOrder_Direction_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "DirectionUnspecified", .number = PropertyOrder_Direction_DirectionUnspecified },
      { .name = "Ascending", .number = PropertyOrder_Direction_Ascending },
      { .name = "Descending", .number = PropertyOrder_Direction_Descending },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PropertyOrder_Direction)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:PropertyOrder_Direction_IsValidValue];
  }
  return descriptor;
}

BOOL PropertyOrder_Direction_IsValidValue(int32_t value__) {
  switch (value__) {
    case PropertyOrder_Direction_DirectionUnspecified:
    case PropertyOrder_Direction_Ascending:
    case PropertyOrder_Direction_Descending:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Filter

@implementation Filter

@dynamic filterTypeOneOfCase;
@dynamic compositeFilter;
@dynamic propertyFilter;

typedef struct Filter__storage_ {
  uint32_t _has_storage_[2];
  CompositeFilter *compositeFilter;
  PropertyFilter *propertyFilter;
} Filter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageOneofDescription oneofs[] = {
      {
        .name = "filterType",
        .index = -1,
      },
    };
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "compositeFilter",
        .number = Filter_FieldNumber_CompositeFilter,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Filter__storage_, compositeFilter),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(CompositeFilter),
        .fieldOptions = NULL,
      },
      {
        .name = "propertyFilter",
        .number = Filter_FieldNumber_PropertyFilter,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Filter__storage_, propertyFilter),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(PropertyFilter),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Filter class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:oneofs
                                    oneofCount:sizeof(oneofs) / sizeof(GPBMessageOneofDescription)
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Filter__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Filter_ClearFilterTypeOneOfCase(Filter *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, 0);
}
#pragma mark - CompositeFilter

@implementation CompositeFilter

@dynamic op;
@dynamic filtersArray, filtersArray_Count;

typedef struct CompositeFilter__storage_ {
  uint32_t _has_storage_[1];
  CompositeFilter_Operator op;
  NSMutableArray *filtersArray;
} CompositeFilter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "op",
        .number = CompositeFilter_FieldNumber_Op,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(CompositeFilter__storage_, op),
        .defaultValue.valueEnum = CompositeFilter_Operator_OperatorUnspecified,
        .dataTypeSpecific.enumDescFunc = CompositeFilter_Operator_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "filtersArray",
        .number = CompositeFilter_FieldNumber_FiltersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(CompositeFilter__storage_, filtersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Filter),
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = CompositeFilter_Operator_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompositeFilter class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(CompositeFilter__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CompositeFilter_Op_RawValue(CompositeFilter *message) {
  GPBDescriptor *descriptor = [CompositeFilter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CompositeFilter_FieldNumber_Op];
  return GPBGetMessageInt32Field(message, field);
}

void SetCompositeFilter_Op_RawValue(CompositeFilter *message, int32_t value) {
  GPBDescriptor *descriptor = [CompositeFilter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CompositeFilter_FieldNumber_Op];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CompositeFilter_Operator

GPBEnumDescriptor *CompositeFilter_Operator_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "OperatorUnspecified", .number = CompositeFilter_Operator_OperatorUnspecified },
      { .name = "And", .number = CompositeFilter_Operator_And },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CompositeFilter_Operator)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:CompositeFilter_Operator_IsValidValue];
  }
  return descriptor;
}

BOOL CompositeFilter_Operator_IsValidValue(int32_t value__) {
  switch (value__) {
    case CompositeFilter_Operator_OperatorUnspecified:
    case CompositeFilter_Operator_And:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PropertyFilter

@implementation PropertyFilter

@dynamic hasProperty, property;
@dynamic op;
@dynamic hasValue, value;

typedef struct PropertyFilter__storage_ {
  uint32_t _has_storage_[1];
  PropertyFilter_Operator op;
  PropertyReference *property;
  Value *value;
} PropertyFilter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "property",
        .number = PropertyFilter_FieldNumber_Property,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PropertyFilter__storage_, property),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(PropertyReference),
        .fieldOptions = NULL,
      },
      {
        .name = "op",
        .number = PropertyFilter_FieldNumber_Op,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(PropertyFilter__storage_, op),
        .defaultValue.valueEnum = PropertyFilter_Operator_OperatorUnspecified,
        .dataTypeSpecific.enumDescFunc = PropertyFilter_Operator_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "value",
        .number = PropertyFilter_FieldNumber_Value,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PropertyFilter__storage_, value),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Value),
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = PropertyFilter_Operator_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PropertyFilter class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PropertyFilter__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PropertyFilter_Op_RawValue(PropertyFilter *message) {
  GPBDescriptor *descriptor = [PropertyFilter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PropertyFilter_FieldNumber_Op];
  return GPBGetMessageInt32Field(message, field);
}

void SetPropertyFilter_Op_RawValue(PropertyFilter *message, int32_t value) {
  GPBDescriptor *descriptor = [PropertyFilter descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PropertyFilter_FieldNumber_Op];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum PropertyFilter_Operator

GPBEnumDescriptor *PropertyFilter_Operator_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "OperatorUnspecified", .number = PropertyFilter_Operator_OperatorUnspecified },
      { .name = "LessThan", .number = PropertyFilter_Operator_LessThan },
      { .name = "LessThanOrEqual", .number = PropertyFilter_Operator_LessThanOrEqual },
      { .name = "GreaterThan", .number = PropertyFilter_Operator_GreaterThan },
      { .name = "GreaterThanOrEqual", .number = PropertyFilter_Operator_GreaterThanOrEqual },
      { .name = "Equal", .number = PropertyFilter_Operator_Equal },
      { .name = "HasAncestor", .number = PropertyFilter_Operator_HasAncestor },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PropertyFilter_Operator)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:PropertyFilter_Operator_IsValidValue];
  }
  return descriptor;
}

BOOL PropertyFilter_Operator_IsValidValue(int32_t value__) {
  switch (value__) {
    case PropertyFilter_Operator_OperatorUnspecified:
    case PropertyFilter_Operator_LessThan:
    case PropertyFilter_Operator_LessThanOrEqual:
    case PropertyFilter_Operator_GreaterThan:
    case PropertyFilter_Operator_GreaterThanOrEqual:
    case PropertyFilter_Operator_Equal:
    case PropertyFilter_Operator_HasAncestor:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GqlQuery

@implementation GqlQuery

@dynamic queryString;
@dynamic allowLiterals;
@dynamic namedBindings, namedBindings_Count;
@dynamic positionalBindingsArray, positionalBindingsArray_Count;

typedef struct GqlQuery__storage_ {
  uint32_t _has_storage_[1];
  BOOL allowLiterals;
  NSString *queryString;
  NSMutableArray *positionalBindingsArray;
  NSMutableDictionary *namedBindings;
} GqlQuery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "queryString",
        .number = GqlQuery_FieldNumber_QueryString,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GqlQuery__storage_, queryString),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "allowLiterals",
        .number = GqlQuery_FieldNumber_AllowLiterals,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(GqlQuery__storage_, allowLiterals),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "positionalBindingsArray",
        .number = GqlQuery_FieldNumber_PositionalBindingsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GqlQuery__storage_, positionalBindingsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GqlQueryParameter),
        .fieldOptions = NULL,
      },
      {
        .name = "namedBindings",
        .number = GqlQuery_FieldNumber_NamedBindings,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GqlQuery__storage_, namedBindings),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GqlQueryParameter),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GqlQuery class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GqlQuery__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GqlQueryParameter

@implementation GqlQueryParameter

@dynamic parameterTypeOneOfCase;
@dynamic value;
@dynamic cursor;

typedef struct GqlQueryParameter__storage_ {
  uint32_t _has_storage_[2];
  Value *value;
  NSData *cursor;
} GqlQueryParameter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageOneofDescription oneofs[] = {
      {
        .name = "parameterType",
        .index = -1,
      },
    };
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .number = GqlQueryParameter_FieldNumber_Value,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GqlQueryParameter__storage_, value),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Value),
        .fieldOptions = NULL,
      },
      {
        .name = "cursor",
        .number = GqlQueryParameter_FieldNumber_Cursor,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
        .offset = offsetof(GqlQueryParameter__storage_, cursor),
        .defaultValue.valueData = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GqlQueryParameter class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:oneofs
                                    oneofCount:sizeof(oneofs) / sizeof(GPBMessageOneofDescription)
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GqlQueryParameter__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void GqlQueryParameter_ClearParameterTypeOneOfCase(GqlQueryParameter *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, 0);
}
#pragma mark - QueryResultBatch

@implementation QueryResultBatch

@dynamic skippedResults;
@dynamic skippedCursor;
@dynamic entityResultType;
@dynamic entityResultsArray, entityResultsArray_Count;
@dynamic endCursor;
@dynamic moreResults;

typedef struct QueryResultBatch__storage_ {
  uint32_t _has_storage_[1];
  EntityResult_ResultType entityResultType;
  QueryResultBatch_MoreResultsType moreResults;
  int32_t skippedResults;
  NSMutableArray *entityResultsArray;
  NSData *skippedCursor;
  NSData *endCursor;
} QueryResultBatch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entityResultType",
        .number = QueryResultBatch_FieldNumber_EntityResultType,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(QueryResultBatch__storage_, entityResultType),
        .defaultValue.valueEnum = EntityResult_ResultType_ResultTypeUnspecified,
        .dataTypeSpecific.enumDescFunc = EntityResult_ResultType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "entityResultsArray",
        .number = QueryResultBatch_FieldNumber_EntityResultsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(QueryResultBatch__storage_, entityResultsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(EntityResult),
        .fieldOptions = NULL,
      },
      {
        .name = "skippedCursor",
        .number = QueryResultBatch_FieldNumber_SkippedCursor,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
        .offset = offsetof(QueryResultBatch__storage_, skippedCursor),
        .defaultValue.valueData = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "endCursor",
        .number = QueryResultBatch_FieldNumber_EndCursor,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
        .offset = offsetof(QueryResultBatch__storage_, endCursor),
        .defaultValue.valueData = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "moreResults",
        .number = QueryResultBatch_FieldNumber_MoreResults,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(QueryResultBatch__storage_, moreResults),
        .defaultValue.valueEnum = QueryResultBatch_MoreResultsType_MoreResultsTypeUnspecified,
        .dataTypeSpecific.enumDescFunc = QueryResultBatch_MoreResultsType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "skippedResults",
        .number = QueryResultBatch_FieldNumber_SkippedResults,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(QueryResultBatch__storage_, skippedResults),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = QueryResultBatch_MoreResultsType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueryResultBatch class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(QueryResultBatch__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t QueryResultBatch_EntityResultType_RawValue(QueryResultBatch *message) {
  GPBDescriptor *descriptor = [QueryResultBatch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QueryResultBatch_FieldNumber_EntityResultType];
  return GPBGetMessageInt32Field(message, field);
}

void SetQueryResultBatch_EntityResultType_RawValue(QueryResultBatch *message, int32_t value) {
  GPBDescriptor *descriptor = [QueryResultBatch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QueryResultBatch_FieldNumber_EntityResultType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t QueryResultBatch_MoreResults_RawValue(QueryResultBatch *message) {
  GPBDescriptor *descriptor = [QueryResultBatch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QueryResultBatch_FieldNumber_MoreResults];
  return GPBGetMessageInt32Field(message, field);
}

void SetQueryResultBatch_MoreResults_RawValue(QueryResultBatch *message, int32_t value) {
  GPBDescriptor *descriptor = [QueryResultBatch descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QueryResultBatch_FieldNumber_MoreResults];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum QueryResultBatch_MoreResultsType

GPBEnumDescriptor *QueryResultBatch_MoreResultsType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "MoreResultsTypeUnspecified", .number = QueryResultBatch_MoreResultsType_MoreResultsTypeUnspecified },
      { .name = "NotFinished", .number = QueryResultBatch_MoreResultsType_NotFinished },
      { .name = "MoreResultsAfterLimit", .number = QueryResultBatch_MoreResultsType_MoreResultsAfterLimit },
      { .name = "MoreResultsAfterCursor", .number = QueryResultBatch_MoreResultsType_MoreResultsAfterCursor },
      { .name = "NoMoreResults", .number = QueryResultBatch_MoreResultsType_NoMoreResults },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(QueryResultBatch_MoreResultsType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:QueryResultBatch_MoreResultsType_IsValidValue];
  }
  return descriptor;
}

BOOL QueryResultBatch_MoreResultsType_IsValidValue(int32_t value__) {
  switch (value__) {
    case QueryResultBatch_MoreResultsType_MoreResultsTypeUnspecified:
    case QueryResultBatch_MoreResultsType_NotFinished:
    case QueryResultBatch_MoreResultsType_MoreResultsAfterLimit:
    case QueryResultBatch_MoreResultsType_MoreResultsAfterCursor:
    case QueryResultBatch_MoreResultsType_NoMoreResults:
      return YES;
    default:
      return NO;
  }
}


// @@protoc_insertion_point(global_scope)
