// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1beta3/entity.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30000
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

CF_EXTERN_C_BEGIN

@class ArrayValue;
@class Entity;
@class GPBTimestamp;
@class Key;
@class LatLng;
@class PartitionId;
GPB_ENUM_FWD_DECLARE(GPBNullValue);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - EntityRoot

@interface EntityRoot : GPBRootObject

// The base class provides:
//   + (GPBExtensionRegistry *)extensionRegistry;
// which is an GPBExtensionRegistry that includes all the extensions defined by
// this file and all files that it depends on.

@end

#pragma mark - PartitionId

typedef GPB_ENUM(PartitionId_FieldNumber) {
  PartitionId_FieldNumber_ProjectId = 2,
  PartitionId_FieldNumber_NamespaceId = 4,
};

// A partition ID identifies a grouping of entities. The grouping is always
// by project and namespace, however the namespace ID may be empty.
//
// A partition ID contains several dimensions:
// project ID and namespace ID.
// Partition dimensions:
// - A dimension may be `""`.
// - A dimension must be valid UTF-8 bytes.
// - A dimension's value must match regex `[A-Za-z\d\.\-_]{1,100}`
// If the value of any dimension matches regex `__.*__`, the partition is
// reserved/read-only.
// A reserved/read-only partition ID is forbidden in certain documented
// contexts.
//
// Foreign partition IDs (in which the project ID does
// not match the context project ID ) are discouraged.
// Reads and writes of foreign partition IDs may fail if the project is not in an active state.
@interface PartitionId : GPBMessage

// Project ID.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

// Namespace ID.
@property(nonatomic, readwrite, copy, null_resettable) NSString *namespaceId;

@end

#pragma mark - Key

typedef GPB_ENUM(Key_FieldNumber) {
  Key_FieldNumber_PartitionId = 1,
  Key_FieldNumber_PathArray = 2,
};

// A unique identifier for an entity.
// If a key's partition id or any of its path kinds or names are
// reserved/read-only, the key is reserved/read-only.
// A reserved/read-only key is forbidden in certain documented contexts.
@interface Key : GPBMessage

// Entities are partitioned into subsets, currently identified by a dataset
// (usually implicitly specified by the project) and namespace ID.
// Queries are scoped to a single partition.
@property(nonatomic, readwrite) BOOL hasPartitionId;
@property(nonatomic, readwrite, strong, null_resettable) PartitionId *partitionId;

// The entity path.
// An entity path consists of one or more elements composed of a kind and a
// string or numerical identifier, which identify entities. The first
// element identifies a _root entity_, the second element identifies
// a _child_ of the root entity, the third element a child of the
// second entity, and so forth. The entities identified by all prefixes of
// the path are called the element's _ancestors_.
// An entity path is always fully complete: *all* of the entity's ancestors
// are required to be in the path along with the entity identifier itself.
// The only exception is that in some documented cases, the identifier in the
// last path element (for the entity) itself may be omitted. A path can never
// be empty. The path can have at most 100 elements.
// |pathArray| contains |Key_PathElement|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *pathArray;
@property(nonatomic, readonly) NSUInteger pathArray_Count;

@end

#pragma mark - Key_PathElement

typedef GPB_ENUM(Key_PathElement_FieldNumber) {
  Key_PathElement_FieldNumber_Kind = 1,
  Key_PathElement_FieldNumber_Id_p = 2,
  Key_PathElement_FieldNumber_Name = 3,
};

typedef GPB_ENUM(Key_PathElement_IdType_OneOfCase) {
  Key_PathElement_IdType_OneOfCase_GPBUnsetOneOfCase = 0,
  Key_PathElement_IdType_OneOfCase_Id_p = 2,
  Key_PathElement_IdType_OneOfCase_Name = 3,
};

// A (kind, ID/name) pair used to construct a key path.
//
// If either name nor ID is set, the element is complete.
// If neither is set, the element is incomplete.
@interface Key_PathElement : GPBMessage

// The kind of the entity.
// A kind matching regex `__.*__` is reserved/read-only.
// A kind must not contain more than 1500 bytes when UTF-8 encoded.
// Cannot be `""`.
@property(nonatomic, readwrite, copy, null_resettable) NSString *kind;

// The type of id.
@property(nonatomic, readonly) Key_PathElement_IdType_OneOfCase idTypeOneOfCase;

// The auto allocated ID of the entity.
// Never equal to zero. Values less than zero are discouraged and may not
// be supported in the future.
@property(nonatomic, readwrite) int64_t id_p;

// The name of the entity.
// A name matching regex `__.*__` is reserved/read-only.
// A name must not be more than 1500 bytes when UTF-8 encoded.
// Cannot be `""`.
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

void Key_PathElement_ClearIdTypeOneOfCase(Key_PathElement *message);

#pragma mark - ArrayValue

typedef GPB_ENUM(ArrayValue_FieldNumber) {
  ArrayValue_FieldNumber_ValuesArray = 1,
};

// An array value.
@interface ArrayValue : GPBMessage

// Values in the array.
// The order of this array may not be preserved if it contains a mix of
// indexed and unindexed values.
// |valuesArray| contains |Value|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *valuesArray;
@property(nonatomic, readonly) NSUInteger valuesArray_Count;

@end

#pragma mark - Value

typedef GPB_ENUM(Value_FieldNumber) {
  Value_FieldNumber_BooleanValue = 1,
  Value_FieldNumber_IntegerValue = 2,
  Value_FieldNumber_DoubleValue = 3,
  Value_FieldNumber_KeyValue = 5,
  Value_FieldNumber_EntityValue = 6,
  Value_FieldNumber_GeoPointValue = 8,
  Value_FieldNumber_ArrayValue = 9,
  Value_FieldNumber_TimestampValue = 10,
  Value_FieldNumber_NullValue = 11,
  Value_FieldNumber_Meaning = 14,
  Value_FieldNumber_StringValue = 17,
  Value_FieldNumber_BlobValue = 18,
  Value_FieldNumber_ExcludeFromIndexes = 19,
};

typedef GPB_ENUM(Value_ValueType_OneOfCase) {
  Value_ValueType_OneOfCase_GPBUnsetOneOfCase = 0,
  Value_ValueType_OneOfCase_NullValue = 11,
  Value_ValueType_OneOfCase_BooleanValue = 1,
  Value_ValueType_OneOfCase_IntegerValue = 2,
  Value_ValueType_OneOfCase_DoubleValue = 3,
  Value_ValueType_OneOfCase_TimestampValue = 10,
  Value_ValueType_OneOfCase_KeyValue = 5,
  Value_ValueType_OneOfCase_StringValue = 17,
  Value_ValueType_OneOfCase_BlobValue = 18,
  Value_ValueType_OneOfCase_GeoPointValue = 8,
  Value_ValueType_OneOfCase_EntityValue = 6,
  Value_ValueType_OneOfCase_ArrayValue = 9,
};

// A message that can hold any of the supported value types and associated
// metadata.
@interface Value : GPBMessage

// Must have a value set.
@property(nonatomic, readonly) Value_ValueType_OneOfCase valueTypeOneOfCase;

// A null value.
@property(nonatomic, readwrite) enum GPBNullValue nullValue;

// A boolean value.
@property(nonatomic, readwrite) BOOL booleanValue;

// An integer value.
@property(nonatomic, readwrite) int64_t integerValue;

// A double value.
@property(nonatomic, readwrite) double doubleValue;

// A timestamp value.
// When stored in the Datastore, precise only to microseconds;
// any additional precision is rounded down.
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *timestampValue;

// A key value.
@property(nonatomic, readwrite, strong, null_resettable) Key *keyValue;

// A UTF-8 encoded string value.
// When `exclude_from_indexes` is false (it is indexed) and meaning is not
// 2, may have at most 1500 bytes.
// When meaning is 2, may have at most 2083 bytes.
// Otherwise, may be set to at least 1,000,000 bytes
@property(nonatomic, readwrite, copy, null_resettable) NSString *stringValue;

// A blob value.
// May have at most 1,000,000 bytes.
// When `exclude_from_indexes` is false, may have at most 1500 bytes.
// In JSON requests, must be base64-encoded.
@property(nonatomic, readwrite, copy, null_resettable) NSData *blobValue;

// A geo point value representing a point on the surface of Earth.
@property(nonatomic, readwrite, strong, null_resettable) LatLng *geoPointValue;

// An entity value.
// May have no key.
// May have a key with an incomplete key path.
// May have a reserved/read-only key.
@property(nonatomic, readwrite, strong, null_resettable) Entity *entityValue;

// An array value.
// Cannot contain another array value.
// A `Value` instance that sets field `array_value` must not set fields
// `meaning` or `exclude_from_indexes`.
@property(nonatomic, readwrite, strong, null_resettable) ArrayValue *arrayValue;

// The `meaning` field should only be populated for backwards compatibility.
@property(nonatomic, readwrite) int32_t meaning;

// If the value should be excluded from all indexes including those defined
// explicitly.
@property(nonatomic, readwrite) BOOL excludeFromIndexes;

@end

int32_t Value_NullValue_RawValue(Value *message);
void SetValue_NullValue_RawValue(Value *message, int32_t value);

void Value_ClearValueTypeOneOfCase(Value *message);

#pragma mark - Entity

typedef GPB_ENUM(Entity_FieldNumber) {
  Entity_FieldNumber_Key = 1,
  Entity_FieldNumber_Properties = 3,
};

// An entity.
//
// An entity is limited to 1 megabyte when stored. That _roughly_
// corresponds to a limit of 1 megabyte for the serialized form of this
// message.
@interface Entity : GPBMessage

// The entity's key.
//
// An entity must have a key, unless otherwise documented (for example,
// an entity in `Value.entity_value` may have no key).
// An entity's kind is its key's path's last element's kind,
// or null if it has no key.
@property(nonatomic, readwrite) BOOL hasKey;
@property(nonatomic, readwrite, strong, null_resettable) Key *key;

// The entity's properties.
// The map's keys are property names.
// A property name matching regex `__.*__` is reserved.
// A reserved property name is forbidden in certain documented contexts.
// The name must not contain more than 500 characters.
// The name cannot be `""`.
// |properties| values are |Value|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary *properties;
@property(nonatomic, readonly) NSUInteger properties_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

// @@protoc_insertion_point(global_scope)
