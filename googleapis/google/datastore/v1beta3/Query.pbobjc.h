// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1beta3/query.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30000
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

CF_EXTERN_C_BEGIN

@class CompositeFilter;
@class Entity;
@class Filter;
@class GPBInt32Value;
@class PropertyFilter;
@class PropertyReference;
@class Value;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum EntityResult_ResultType

// Specifies what data the 'entity' field contains.
// A `ResultType` is either implied (for example, in `LookupResponse.found`
// from `datastore.proto`, it is always `FULL`) or specified by context (for
// example, in message `QueryResultBatch`, field `entity_result_type`
// specifies a `ResultType` for all the values in field `entity_results`).
typedef GPB_ENUM(EntityResult_ResultType) {
  EntityResult_ResultType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // Unspecified.
  EntityResult_ResultType_ResultTypeUnspecified = 0,

  // The entire entity.
  EntityResult_ResultType_Full = 1,

  // A projected subset of properties. The entity may have no key. A property
  // value may have meaning 18.
  EntityResult_ResultType_Projection = 2,

  // Only the key.
  EntityResult_ResultType_KeyOnly = 3,
};

GPBEnumDescriptor *EntityResult_ResultType_EnumDescriptor(void);

BOOL EntityResult_ResultType_IsValidValue(int32_t value);

#pragma mark - Enum PropertyOrder_Direction

// Direction.
typedef GPB_ENUM(PropertyOrder_Direction) {
  PropertyOrder_Direction_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // Unspecified.
  PropertyOrder_Direction_DirectionUnspecified = 0,

  // Ascending.
  PropertyOrder_Direction_Ascending = 1,

  // Descending.
  PropertyOrder_Direction_Descending = 2,
};

GPBEnumDescriptor *PropertyOrder_Direction_EnumDescriptor(void);

BOOL PropertyOrder_Direction_IsValidValue(int32_t value);

#pragma mark - Enum CompositeFilter_Operator

// Composite filter operator.
typedef GPB_ENUM(CompositeFilter_Operator) {
  CompositeFilter_Operator_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // Unspecified. This value must not be used.
  CompositeFilter_Operator_OperatorUnspecified = 0,

  // And.
  CompositeFilter_Operator_And = 1,
};

GPBEnumDescriptor *CompositeFilter_Operator_EnumDescriptor(void);

BOOL CompositeFilter_Operator_IsValidValue(int32_t value);

#pragma mark - Enum PropertyFilter_Operator

// Property filter operator.
typedef GPB_ENUM(PropertyFilter_Operator) {
  PropertyFilter_Operator_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // Unspecified. This value must not be used.
  PropertyFilter_Operator_OperatorUnspecified = 0,

  // Less than.
  PropertyFilter_Operator_LessThan = 1,

  // Less than or equal.
  PropertyFilter_Operator_LessThanOrEqual = 2,

  // Greater than.
  PropertyFilter_Operator_GreaterThan = 3,

  // Greater than or equal.
  PropertyFilter_Operator_GreaterThanOrEqual = 4,

  // Equal.
  PropertyFilter_Operator_Equal = 5,

  // Has ancestor.
  PropertyFilter_Operator_HasAncestor = 11,
};

GPBEnumDescriptor *PropertyFilter_Operator_EnumDescriptor(void);

BOOL PropertyFilter_Operator_IsValidValue(int32_t value);

#pragma mark - Enum QueryResultBatch_MoreResultsType

// The possible values for the `more_results` field.
typedef GPB_ENUM(QueryResultBatch_MoreResultsType) {
  QueryResultBatch_MoreResultsType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // Unspecified. This value is never used.
  QueryResultBatch_MoreResultsType_MoreResultsTypeUnspecified = 0,

  // There may be additional batches to fetch from this query.
  QueryResultBatch_MoreResultsType_NotFinished = 1,

  // The query is finished, but there may be more results after the limit.
  QueryResultBatch_MoreResultsType_MoreResultsAfterLimit = 2,

  // The query is finished, but there may be more results after the end cursor.
  QueryResultBatch_MoreResultsType_MoreResultsAfterCursor = 4,

  // The query has been exhausted.
  QueryResultBatch_MoreResultsType_NoMoreResults = 3,
};

GPBEnumDescriptor *QueryResultBatch_MoreResultsType_EnumDescriptor(void);

BOOL QueryResultBatch_MoreResultsType_IsValidValue(int32_t value);

#pragma mark - QueryRoot

@interface QueryRoot : GPBRootObject

// The base class provides:
//   + (GPBExtensionRegistry *)extensionRegistry;
// which is an GPBExtensionRegistry that includes all the extensions defined by
// this file and all files that it depends on.

@end

#pragma mark - EntityResult

typedef GPB_ENUM(EntityResult_FieldNumber) {
  EntityResult_FieldNumber_Entity = 1,
  EntityResult_FieldNumber_Cursor = 3,
};

// The result of fetching an entity from the datastore.
@interface EntityResult : GPBMessage

// The resulting entity.
@property(nonatomic, readwrite) BOOL hasEntity;
@property(nonatomic, readwrite, strong, null_resettable) Entity *entity;

// A cursor that points to the position after the result entity.
// Set only when the `EntityResult` is part of a `QueryResultBatch` message.
@property(nonatomic, readwrite, copy, null_resettable) NSData *cursor;

@end

#pragma mark - Query

typedef GPB_ENUM(Query_FieldNumber) {
  Query_FieldNumber_ProjectionArray = 2,
  Query_FieldNumber_KindArray = 3,
  Query_FieldNumber_Filter = 4,
  Query_FieldNumber_OrderArray = 5,
  Query_FieldNumber_DistinctOnArray = 6,
  Query_FieldNumber_StartCursor = 7,
  Query_FieldNumber_EndCursor = 8,
  Query_FieldNumber_Offset = 10,
  Query_FieldNumber_Limit = 12,
};

// A query.
@interface Query : GPBMessage

// The projection to return. Defaults to returning all properties.
// |projectionArray| contains |Projection|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *projectionArray;
@property(nonatomic, readonly) NSUInteger projectionArray_Count;

// The kinds to query (if empty, returns entities of all kinds).
// Currently at most 1 kind may be specified.
// |kindArray| contains |KindExpression|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *kindArray;
@property(nonatomic, readonly) NSUInteger kindArray_Count;

// The filter to apply.
@property(nonatomic, readwrite) BOOL hasFilter;
@property(nonatomic, readwrite, strong, null_resettable) Filter *filter;

// The order to apply to the query results (if empty, order is unspecified).
// |orderArray| contains |PropertyOrder|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *orderArray;
@property(nonatomic, readonly) NSUInteger orderArray_Count;

// The properties to make distinct. The query results will contain the first
// result for each distinct combination of values for the given properties
// (if empty, all results are returned).
// |distinctOnArray| contains |PropertyReference|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *distinctOnArray;
@property(nonatomic, readonly) NSUInteger distinctOnArray_Count;

// A starting point for the query results. Query cursors are
// returned in query result batches.
@property(nonatomic, readwrite, copy, null_resettable) NSData *startCursor;

// An ending point for the query results. Query cursors are
// returned in query result batches.
@property(nonatomic, readwrite, copy, null_resettable) NSData *endCursor;

// The number of results to skip. Applies before limit, but after all other
// constraints.
// Must be >= 0.
@property(nonatomic, readwrite) int32_t offset;

// The maximum number of results to return. Applies after all other
// constraints.
// Unspecified is interpreted as no limit.
// Must be >= 0.
@property(nonatomic, readwrite) BOOL hasLimit;
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Value *limit;

@end

#pragma mark - KindExpression

typedef GPB_ENUM(KindExpression_FieldNumber) {
  KindExpression_FieldNumber_Name = 1,
};

// A representation of a kind.
@interface KindExpression : GPBMessage

// The name of the kind.
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

#pragma mark - PropertyReference

typedef GPB_ENUM(PropertyReference_FieldNumber) {
  PropertyReference_FieldNumber_Name = 2,
};

// A reference to a property relative to the kind expressions.
@interface PropertyReference : GPBMessage

// The name of the property.
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

#pragma mark - Projection

typedef GPB_ENUM(Projection_FieldNumber) {
  Projection_FieldNumber_Property = 1,
};

// A representation of a property in a projection.
@interface Projection : GPBMessage

// The property to project.
@property(nonatomic, readwrite) BOOL hasProperty;
@property(nonatomic, readwrite, strong, null_resettable) PropertyReference *property;

@end

#pragma mark - PropertyOrder

typedef GPB_ENUM(PropertyOrder_FieldNumber) {
  PropertyOrder_FieldNumber_Property = 1,
  PropertyOrder_FieldNumber_Direction = 2,
};

// The desired order for a specific property.
@interface PropertyOrder : GPBMessage

// The property to order by.
@property(nonatomic, readwrite) BOOL hasProperty;
@property(nonatomic, readwrite, strong, null_resettable) PropertyReference *property;

// The direction to order by. Defaults to `ASCENDING`.
@property(nonatomic, readwrite) PropertyOrder_Direction direction;

@end

int32_t PropertyOrder_Direction_RawValue(PropertyOrder *message);
void SetPropertyOrder_Direction_RawValue(PropertyOrder *message, int32_t value);

#pragma mark - Filter

typedef GPB_ENUM(Filter_FieldNumber) {
  Filter_FieldNumber_CompositeFilter = 1,
  Filter_FieldNumber_PropertyFilter = 2,
};

typedef GPB_ENUM(Filter_FilterType_OneOfCase) {
  Filter_FilterType_OneOfCase_GPBUnsetOneOfCase = 0,
  Filter_FilterType_OneOfCase_CompositeFilter = 1,
  Filter_FilterType_OneOfCase_PropertyFilter = 2,
};

// A holder for any type of filter.
@interface Filter : GPBMessage

// The type of filter.
@property(nonatomic, readonly) Filter_FilterType_OneOfCase filterTypeOneOfCase;

// A composite filter.
@property(nonatomic, readwrite, strong, null_resettable) CompositeFilter *compositeFilter;

// A filter on a property.
@property(nonatomic, readwrite, strong, null_resettable) PropertyFilter *propertyFilter;

@end

void Filter_ClearFilterTypeOneOfCase(Filter *message);

#pragma mark - CompositeFilter

typedef GPB_ENUM(CompositeFilter_FieldNumber) {
  CompositeFilter_FieldNumber_Op = 1,
  CompositeFilter_FieldNumber_FiltersArray = 2,
};

// A filter that merges the multiple other filters using the given operator.
@interface CompositeFilter : GPBMessage

// The operator for combining multiple filters.
@property(nonatomic, readwrite) CompositeFilter_Operator op;

// The list of filters to combine.
// Must contain at least one filter.
// |filtersArray| contains |Filter|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *filtersArray;
@property(nonatomic, readonly) NSUInteger filtersArray_Count;

@end

int32_t CompositeFilter_Op_RawValue(CompositeFilter *message);
void SetCompositeFilter_Op_RawValue(CompositeFilter *message, int32_t value);

#pragma mark - PropertyFilter

typedef GPB_ENUM(PropertyFilter_FieldNumber) {
  PropertyFilter_FieldNumber_Property = 1,
  PropertyFilter_FieldNumber_Op = 2,
  PropertyFilter_FieldNumber_Value = 3,
};

// A filter on a specific property.
@interface PropertyFilter : GPBMessage

// The property to filter by.
@property(nonatomic, readwrite) BOOL hasProperty;
@property(nonatomic, readwrite, strong, null_resettable) PropertyReference *property;

// The operator to filter by.
@property(nonatomic, readwrite) PropertyFilter_Operator op;

// The value to compare the property to.
@property(nonatomic, readwrite) BOOL hasValue;
@property(nonatomic, readwrite, strong, null_resettable) Value *value;

@end

int32_t PropertyFilter_Op_RawValue(PropertyFilter *message);
void SetPropertyFilter_Op_RawValue(PropertyFilter *message, int32_t value);

#pragma mark - GqlQuery

typedef GPB_ENUM(GqlQuery_FieldNumber) {
  GqlQuery_FieldNumber_QueryString = 1,
  GqlQuery_FieldNumber_AllowLiterals = 2,
  GqlQuery_FieldNumber_PositionalBindingsArray = 4,
  GqlQuery_FieldNumber_NamedBindings = 5,
};

// A GQL query.
@interface GqlQuery : GPBMessage

// A string of the format described
// [here](https://developers.google.com/datastore/docs/concepts/gql).
@property(nonatomic, readwrite, copy, null_resettable) NSString *queryString;

// When false, the query string must not contain any literals and instead
// must bind all values. For example,
// `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while
// `SELECT * FROM Kind WHERE a = @value` is.
@property(nonatomic, readwrite) BOOL allowLiterals;

// For each non-reserved named binding site in the query string,
// there must be a named parameter with that name,
// but not necessarily the inverse.
// Key must match regex `[A-Za-z_&#36;][A-Za-z_&#36;0-9]*`, must not match regex
// `__.*__`, and must not be `""`.
// |namedBindings| values are |GqlQueryParameter|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary *namedBindings;
@property(nonatomic, readonly) NSUInteger namedBindings_Count;

// Numbered binding site @1 references the first numbered parameter,
// effectively using 1-based indexing, rather than the usual 0.
// For each binding site numbered i in `query_string`,
// there must be an i-th numbered parameter.
// The inverse must also be true.
// |positionalBindingsArray| contains |GqlQueryParameter|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *positionalBindingsArray;
@property(nonatomic, readonly) NSUInteger positionalBindingsArray_Count;

@end

#pragma mark - GqlQueryParameter

typedef GPB_ENUM(GqlQueryParameter_FieldNumber) {
  GqlQueryParameter_FieldNumber_Value = 2,
  GqlQueryParameter_FieldNumber_Cursor = 3,
};

typedef GPB_ENUM(GqlQueryParameter_ParameterType_OneOfCase) {
  GqlQueryParameter_ParameterType_OneOfCase_GPBUnsetOneOfCase = 0,
  GqlQueryParameter_ParameterType_OneOfCase_Value = 2,
  GqlQueryParameter_ParameterType_OneOfCase_Cursor = 3,
};

// A binding parameter for a GQL query.
@interface GqlQueryParameter : GPBMessage

// The type of parameter.
@property(nonatomic, readonly) GqlQueryParameter_ParameterType_OneOfCase parameterTypeOneOfCase;

// Value.
@property(nonatomic, readwrite, strong, null_resettable) Value *value;

// Cursor.
@property(nonatomic, readwrite, copy, null_resettable) NSData *cursor;

@end

void GqlQueryParameter_ClearParameterTypeOneOfCase(GqlQueryParameter *message);

#pragma mark - QueryResultBatch

typedef GPB_ENUM(QueryResultBatch_FieldNumber) {
  QueryResultBatch_FieldNumber_EntityResultType = 1,
  QueryResultBatch_FieldNumber_EntityResultsArray = 2,
  QueryResultBatch_FieldNumber_SkippedCursor = 3,
  QueryResultBatch_FieldNumber_EndCursor = 4,
  QueryResultBatch_FieldNumber_MoreResults = 5,
  QueryResultBatch_FieldNumber_SkippedResults = 6,
};

// A batch of results produced by a query.
@interface QueryResultBatch : GPBMessage

// The number of results skipped, typically because of an offset.
@property(nonatomic, readwrite) int32_t skippedResults;

// A cursor that points to the position after the last skipped result.
// Will be set when `skipped_results` != 0.
@property(nonatomic, readwrite, copy, null_resettable) NSData *skippedCursor;

// The result type for every entity in `entity_results`.
@property(nonatomic, readwrite) EntityResult_ResultType entityResultType;

// The results for this batch.
// |entityResultsArray| contains |EntityResult|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *entityResultsArray;
@property(nonatomic, readonly) NSUInteger entityResultsArray_Count;

// A cursor that points to the position after the last result in the batch.
@property(nonatomic, readwrite, copy, null_resettable) NSData *endCursor;

// The state of the query after the current batch.
@property(nonatomic, readwrite) QueryResultBatch_MoreResultsType moreResults;

@end

int32_t QueryResultBatch_EntityResultType_RawValue(QueryResultBatch *message);
void SetQueryResultBatch_EntityResultType_RawValue(QueryResultBatch *message, int32_t value);

int32_t QueryResultBatch_MoreResults_RawValue(QueryResultBatch *message);
void SetQueryResultBatch_MoreResults_RawValue(QueryResultBatch *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

// @@protoc_insertion_point(global_scope)
