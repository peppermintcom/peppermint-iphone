// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/v1/iam_policy.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "google/iam/v1/IamPolicy.pbobjc.h"
#import "google/iam/v1/Policy.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - IamPolicyRoot

@implementation IamPolicyRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[PolicyRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - IamPolicyRoot_FileDescriptor

static GPBFileDescriptor *IamPolicyRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.iam.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SetIamPolicyRequest

@implementation SetIamPolicyRequest

@dynamic resource;
@dynamic hasPolicy, policy;

typedef struct SetIamPolicyRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *resource;
  Policy *policy;
} SetIamPolicyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resource",
        .number = SetIamPolicyRequest_FieldNumber_Resource,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SetIamPolicyRequest__storage_, resource),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "policy",
        .number = SetIamPolicyRequest_FieldNumber_Policy,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(SetIamPolicyRequest__storage_, policy),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Policy),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetIamPolicyRequest class]
                                     rootClass:[IamPolicyRoot class]
                                          file:IamPolicyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SetIamPolicyRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetIamPolicyRequest

@implementation GetIamPolicyRequest

@dynamic resource;

typedef struct GetIamPolicyRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *resource;
} GetIamPolicyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resource",
        .number = GetIamPolicyRequest_FieldNumber_Resource,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GetIamPolicyRequest__storage_, resource),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetIamPolicyRequest class]
                                     rootClass:[IamPolicyRoot class]
                                          file:IamPolicyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GetIamPolicyRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TestIamPermissionsRequest

@implementation TestIamPermissionsRequest

@dynamic resource;
@dynamic permissionsArray, permissionsArray_Count;

typedef struct TestIamPermissionsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *resource;
  NSMutableArray *permissionsArray;
} TestIamPermissionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resource",
        .number = TestIamPermissionsRequest_FieldNumber_Resource,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(TestIamPermissionsRequest__storage_, resource),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "permissionsArray",
        .number = TestIamPermissionsRequest_FieldNumber_PermissionsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(TestIamPermissionsRequest__storage_, permissionsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TestIamPermissionsRequest class]
                                     rootClass:[IamPolicyRoot class]
                                          file:IamPolicyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(TestIamPermissionsRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TestIamPermissionsResponse

@implementation TestIamPermissionsResponse

@dynamic permissionsArray, permissionsArray_Count;

typedef struct TestIamPermissionsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *permissionsArray;
} TestIamPermissionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "permissionsArray",
        .number = TestIamPermissionsResponse_FieldNumber_PermissionsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(TestIamPermissionsResponse__storage_, permissionsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TestIamPermissionsResponse class]
                                     rootClass:[IamPolicyRoot class]
                                          file:IamPolicyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(TestIamPermissionsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
