// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/v1/policy.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30000
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - PolicyRoot

@interface PolicyRoot : GPBRootObject

// The base class provides:
//   + (GPBExtensionRegistry *)extensionRegistry;
// which is an GPBExtensionRegistry that includes all the extensions defined by
// this file and all files that it depends on.

@end

#pragma mark - Policy

typedef GPB_ENUM(Policy_FieldNumber) {
  Policy_FieldNumber_Version = 1,
  Policy_FieldNumber_Etag = 3,
  Policy_FieldNumber_BindingsArray = 4,
};

// # Overview
//
// The `Policy` defines an access control policy language. It is used to
// define policies that are attached to resources like files, folders, VMs,
// etc.
//
//
// # Policy structure
//
// A `Policy` consists of a list of bindings. A `Binding` binds a set of members
// to a role, where the members include user accounts, user groups, user
// domains, and service accounts. A 'role' is a named set of permissions,
// defined by IAM. The definition of a role is outside the policy.
//
// A permission check first determines the roles that include the specified
// permission, and then determines if the principal specified is a
// member of a binding to at least one of these roles. The membership check is
// recursive when a group is bound to a role.
//
// Policy examples:
//
// ```
// {
//   "bindings": [
//     {
//       "role": "roles/owner",
//       "members": [
//         "user:mike@example.com",
//         "group:admins@example.com",
//         "domain:google.com",
//         "serviceAccount:frontend@example.iam.gserviceaccounts.com"]
//     },
//     {
//       "role": "roles/viewer",
//       "members": ["user:sean@example.com"]
//     }
//   ]
// }
// ```
@interface Policy : GPBMessage

// The policy language version. The version of the policy is
// represented by the etag. The default version is 0.
@property(nonatomic, readwrite) int32_t version;

// It is an error to specify multiple bindings for the same role.
// It is an error to specify a binding with no members.
// |bindingsArray| contains |Binding|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *bindingsArray;
@property(nonatomic, readonly) NSUInteger bindingsArray_Count;

// Can be used to perform a read-modify-write.
@property(nonatomic, readwrite, copy, null_resettable) NSData *etag;

@end

#pragma mark - Binding

typedef GPB_ENUM(Binding_FieldNumber) {
  Binding_FieldNumber_Role = 1,
  Binding_FieldNumber_MembersArray = 2,
};

// Associates members with roles. See below for allowed
// formats of members.
@interface Binding : GPBMessage

// The name of the role to which the members should be bound.
// Examples: "roles/viewer", "roles/editor", "roles/owner".
// Required
@property(nonatomic, readwrite, copy, null_resettable) NSString *role;

// Format of member entries:
// 1. allUsers
//    Matches any requesting principal (users, service accounts or anonymous).
//
// 2. allAuthenticatedUsers
//    Matches any requesting authenticated principal (users or service
//    accounts).
//
// 3. user:{emailid}
//    A google user account using an email address.
//    For example alice@gmail.com, joe@example.com
//
// 4. serviceAccount:{emailid}
//    An service account email.
//
// 5. group:{emailid}
//    A google group with an email address. For example
//    auth-ti-cloud@google.com
//
// 6. domain:{domain}
//    A Google Apps domain name.
//    For example google.com, example.com
// |membersArray| contains |NSString|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *membersArray;
@property(nonatomic, readonly) NSUInteger membersArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

// @@protoc_insertion_point(global_scope)
