// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v1/trace.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "google/devtools/cloudtrace/v1/Trace.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "google/protobuf/Empty.pbobjc.h"
#import "google/protobuf/Timestamp.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - TraceRoot

@implementation TraceRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
    [registry addExtensions:[GPBEmptyRoot extensionRegistry]];
    [registry addExtensions:[GPBTimestampRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - TraceRoot_FileDescriptor

static GPBFileDescriptor *TraceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.devtools.cloudtrace.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Trace

@implementation Trace

@dynamic projectId;
@dynamic traceId;
@dynamic spansArray, spansArray_Count;

typedef struct Trace__storage_ {
  uint32_t _has_storage_[1];
  NSString *projectId;
  NSString *traceId;
  NSMutableArray *spansArray;
} Trace__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "projectId",
        .number = Trace_FieldNumber_ProjectId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Trace__storage_, projectId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "traceId",
        .number = Trace_FieldNumber_TraceId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Trace__storage_, traceId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "spansArray",
        .number = Trace_FieldNumber_SpansArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Trace__storage_, spansArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(TraceSpan),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Trace class]
                                     rootClass:[TraceRoot class]
                                          file:TraceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Trace__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Traces

@implementation Traces

@dynamic tracesArray, tracesArray_Count;

typedef struct Traces__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tracesArray;
} Traces__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tracesArray",
        .number = Traces_FieldNumber_TracesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Traces__storage_, tracesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Trace),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Traces class]
                                     rootClass:[TraceRoot class]
                                          file:TraceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Traces__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TraceSpan

@implementation TraceSpan

@dynamic spanId;
@dynamic kind;
@dynamic name;
@dynamic hasStartTime, startTime;
@dynamic hasEndTime, endTime;
@dynamic parentSpanId;
@dynamic labels, labels_Count;

typedef struct TraceSpan__storage_ {
  uint32_t _has_storage_[1];
  TraceSpan_SpanKind kind;
  NSString *name;
  GPBTimestamp *startTime;
  GPBTimestamp *endTime;
  NSMutableDictionary *labels;
  uint64_t spanId;
  uint64_t parentSpanId;
} TraceSpan__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "spanId",
        .number = TraceSpan_FieldNumber_SpanId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
        .offset = offsetof(TraceSpan__storage_, spanId),
        .defaultValue.valueUInt64 = 0ULL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "kind",
        .number = TraceSpan_FieldNumber_Kind,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(TraceSpan__storage_, kind),
        .defaultValue.valueEnum = TraceSpan_SpanKind_SpanKindUnspecified,
        .dataTypeSpecific.enumDescFunc = TraceSpan_SpanKind_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = TraceSpan_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(TraceSpan__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "startTime",
        .number = TraceSpan_FieldNumber_StartTime,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(TraceSpan__storage_, startTime),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .fieldOptions = NULL,
      },
      {
        .name = "endTime",
        .number = TraceSpan_FieldNumber_EndTime,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(TraceSpan__storage_, endTime),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .fieldOptions = NULL,
      },
      {
        .name = "parentSpanId",
        .number = TraceSpan_FieldNumber_ParentSpanId,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed64,
        .offset = offsetof(TraceSpan__storage_, parentSpanId),
        .defaultValue.valueUInt64 = 0ULL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "labels",
        .number = TraceSpan_FieldNumber_Labels,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
        .offset = offsetof(TraceSpan__storage_, labels),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = TraceSpan_SpanKind_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TraceSpan class]
                                     rootClass:[TraceRoot class]
                                          file:TraceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(TraceSpan__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TraceSpan_Kind_RawValue(TraceSpan *message) {
  GPBDescriptor *descriptor = [TraceSpan descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TraceSpan_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetTraceSpan_Kind_RawValue(TraceSpan *message, int32_t value) {
  GPBDescriptor *descriptor = [TraceSpan descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TraceSpan_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum TraceSpan_SpanKind

GPBEnumDescriptor *TraceSpan_SpanKind_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "SpanKindUnspecified", .number = TraceSpan_SpanKind_SpanKindUnspecified },
      { .name = "RpcServer", .number = TraceSpan_SpanKind_RpcServer },
      { .name = "RpcClient", .number = TraceSpan_SpanKind_RpcClient },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TraceSpan_SpanKind)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:TraceSpan_SpanKind_IsValidValue];
  }
  return descriptor;
}

BOOL TraceSpan_SpanKind_IsValidValue(int32_t value__) {
  switch (value__) {
    case TraceSpan_SpanKind_SpanKindUnspecified:
    case TraceSpan_SpanKind_RpcServer:
    case TraceSpan_SpanKind_RpcClient:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ListTracesRequest

@implementation ListTracesRequest

@dynamic projectId;
@dynamic view;
@dynamic pageSize;
@dynamic pageToken;
@dynamic hasStartTime, startTime;
@dynamic hasEndTime, endTime;
@dynamic filter;
@dynamic orderBy;

typedef struct ListTracesRequest__storage_ {
  uint32_t _has_storage_[1];
  ListTracesRequest_ViewType view;
  int32_t pageSize;
  NSString *projectId;
  NSString *pageToken;
  GPBTimestamp *startTime;
  GPBTimestamp *endTime;
  NSString *filter;
  NSString *orderBy;
} ListTracesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "projectId",
        .number = ListTracesRequest_FieldNumber_ProjectId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListTracesRequest__storage_, projectId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "view",
        .number = ListTracesRequest_FieldNumber_View,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(ListTracesRequest__storage_, view),
        .defaultValue.valueEnum = ListTracesRequest_ViewType_ViewTypeUnspecified,
        .dataTypeSpecific.enumDescFunc = ListTracesRequest_ViewType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "pageSize",
        .number = ListTracesRequest_FieldNumber_PageSize,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ListTracesRequest__storage_, pageSize),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "pageToken",
        .number = ListTracesRequest_FieldNumber_PageToken,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListTracesRequest__storage_, pageToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "startTime",
        .number = ListTracesRequest_FieldNumber_StartTime,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ListTracesRequest__storage_, startTime),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .fieldOptions = NULL,
      },
      {
        .name = "endTime",
        .number = ListTracesRequest_FieldNumber_EndTime,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ListTracesRequest__storage_, endTime),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .fieldOptions = NULL,
      },
      {
        .name = "filter",
        .number = ListTracesRequest_FieldNumber_Filter,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListTracesRequest__storage_, filter),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "orderBy",
        .number = ListTracesRequest_FieldNumber_OrderBy,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListTracesRequest__storage_, orderBy),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = ListTracesRequest_ViewType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListTracesRequest class]
                                     rootClass:[TraceRoot class]
                                          file:TraceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ListTracesRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ListTracesRequest_View_RawValue(ListTracesRequest *message) {
  GPBDescriptor *descriptor = [ListTracesRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ListTracesRequest_FieldNumber_View];
  return GPBGetMessageInt32Field(message, field);
}

void SetListTracesRequest_View_RawValue(ListTracesRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [ListTracesRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ListTracesRequest_FieldNumber_View];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ListTracesRequest_ViewType

GPBEnumDescriptor *ListTracesRequest_ViewType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "ViewTypeUnspecified", .number = ListTracesRequest_ViewType_ViewTypeUnspecified },
      { .name = "Minimal", .number = ListTracesRequest_ViewType_Minimal },
      { .name = "Rootspan", .number = ListTracesRequest_ViewType_Rootspan },
      { .name = "Complete", .number = ListTracesRequest_ViewType_Complete },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ListTracesRequest_ViewType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:ListTracesRequest_ViewType_IsValidValue];
  }
  return descriptor;
}

BOOL ListTracesRequest_ViewType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ListTracesRequest_ViewType_ViewTypeUnspecified:
    case ListTracesRequest_ViewType_Minimal:
    case ListTracesRequest_ViewType_Rootspan:
    case ListTracesRequest_ViewType_Complete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ListTracesResponse

@implementation ListTracesResponse

@dynamic tracesArray, tracesArray_Count;
@dynamic nextPageToken;

typedef struct ListTracesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tracesArray;
  NSString *nextPageToken;
} ListTracesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tracesArray",
        .number = ListTracesResponse_FieldNumber_TracesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ListTracesResponse__storage_, tracesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Trace),
        .fieldOptions = NULL,
      },
      {
        .name = "nextPageToken",
        .number = ListTracesResponse_FieldNumber_NextPageToken,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListTracesResponse__storage_, nextPageToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListTracesResponse class]
                                     rootClass:[TraceRoot class]
                                          file:TraceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ListTracesResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTraceRequest

@implementation GetTraceRequest

@dynamic projectId;
@dynamic traceId;

typedef struct GetTraceRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *projectId;
  NSString *traceId;
} GetTraceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "projectId",
        .number = GetTraceRequest_FieldNumber_ProjectId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GetTraceRequest__storage_, projectId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "traceId",
        .number = GetTraceRequest_FieldNumber_TraceId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GetTraceRequest__storage_, traceId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTraceRequest class]
                                     rootClass:[TraceRoot class]
                                          file:TraceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GetTraceRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PatchTracesRequest

@implementation PatchTracesRequest

@dynamic projectId;
@dynamic hasTraces, traces;

typedef struct PatchTracesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *projectId;
  Traces *traces;
} PatchTracesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "projectId",
        .number = PatchTracesRequest_FieldNumber_ProjectId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(PatchTracesRequest__storage_, projectId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "traces",
        .number = PatchTracesRequest_FieldNumber_Traces,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PatchTracesRequest__storage_, traces),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Traces),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PatchTracesRequest class]
                                     rootClass:[TraceRoot class]
                                          file:TraceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PatchTracesRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
