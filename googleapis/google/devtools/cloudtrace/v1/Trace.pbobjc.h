// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v1/trace.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30000
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

CF_EXTERN_C_BEGIN

@class GPBTimestamp;
@class Traces;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum TraceSpan_SpanKind

// Type of span. Can be used to specify additional relationships between spans
// in addition to a parent/child relationship.
typedef GPB_ENUM(TraceSpan_SpanKind) {
  TraceSpan_SpanKind_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // Unspecified.
  TraceSpan_SpanKind_SpanKindUnspecified = 0,

  // Indicates that the span covers server-side handling of an RPC or other
  // remote network request.
  TraceSpan_SpanKind_RpcServer = 1,

  // Indicates that the span covers the client-side wrapper around an RPC or
  // other remote request.
  TraceSpan_SpanKind_RpcClient = 2,
};

GPBEnumDescriptor *TraceSpan_SpanKind_EnumDescriptor(void);

BOOL TraceSpan_SpanKind_IsValidValue(int32_t value);

#pragma mark - Enum ListTracesRequest_ViewType

// Type of data returned for traces in the list.
typedef GPB_ENUM(ListTracesRequest_ViewType) {
  ListTracesRequest_ViewType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // Default is `MINIMAL` if unspecified.
  ListTracesRequest_ViewType_ViewTypeUnspecified = 0,

  // Minimal view of the trace record that contains only the project
  // and trace IDs.
  ListTracesRequest_ViewType_Minimal = 1,

  // Root span view of the trace record that returns the root spans along
  // with the minimal trace data.
  ListTracesRequest_ViewType_Rootspan = 2,

  // Complete view of the trace record that contains the actual trace data.
  // This is equivalent to calling the REST `get` or RPC `GetTrace` method
  // using the ID of each listed trace.
  ListTracesRequest_ViewType_Complete = 3,
};

GPBEnumDescriptor *ListTracesRequest_ViewType_EnumDescriptor(void);

BOOL ListTracesRequest_ViewType_IsValidValue(int32_t value);

#pragma mark - TraceRoot

@interface TraceRoot : GPBRootObject

// The base class provides:
//   + (GPBExtensionRegistry *)extensionRegistry;
// which is an GPBExtensionRegistry that includes all the extensions defined by
// this file and all files that it depends on.

@end

#pragma mark - Trace

typedef GPB_ENUM(Trace_FieldNumber) {
  Trace_FieldNumber_ProjectId = 1,
  Trace_FieldNumber_TraceId = 2,
  Trace_FieldNumber_SpansArray = 3,
};

// A trace describes how long it takes for an application to perform an
// operation. It consists of a set of spans, each of which represent a single
// timed event within the operation.
@interface Trace : GPBMessage

// Project ID of the Cloud project where the trace data is stored.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

// Globally unique identifier for the trace. This identifier is a 128-bit
// numeric value formatted as a 32-byte hex string.
@property(nonatomic, readwrite, copy, null_resettable) NSString *traceId;

// Collection of spans in the trace.
// |spansArray| contains |TraceSpan|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *spansArray;
@property(nonatomic, readonly) NSUInteger spansArray_Count;

@end

#pragma mark - Traces

typedef GPB_ENUM(Traces_FieldNumber) {
  Traces_FieldNumber_TracesArray = 1,
};

// List of new or updated traces.
@interface Traces : GPBMessage

// List of traces.
// |tracesArray| contains |Trace|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *tracesArray;
@property(nonatomic, readonly) NSUInteger tracesArray_Count;

@end

#pragma mark - TraceSpan

typedef GPB_ENUM(TraceSpan_FieldNumber) {
  TraceSpan_FieldNumber_SpanId = 1,
  TraceSpan_FieldNumber_Kind = 2,
  TraceSpan_FieldNumber_Name = 3,
  TraceSpan_FieldNumber_StartTime = 4,
  TraceSpan_FieldNumber_EndTime = 5,
  TraceSpan_FieldNumber_ParentSpanId = 6,
  TraceSpan_FieldNumber_Labels = 7,
};

// A span represents a single timed event within a trace. Spans can be nested
// and form a trace tree. Often, a trace contains a root span that describes the
// end-to-end latency of an operation and, optionally, one or more subspans for
// its suboperations. Spans do not need to be contiguous. There may be gaps
// between spans in a trace.
@interface TraceSpan : GPBMessage

// Identifier for the span. This identifier must be unique within a trace.
@property(nonatomic, readwrite) uint64_t spanId;

// Distinguishes between spans generated in a particular context. For example,
// two spans with the same name may be distinguished using `RPC_CLIENT`
// and `RPC_SERVER` to identify queueing latency associated with the span.
@property(nonatomic, readwrite) TraceSpan_SpanKind kind;

// Name of the trace. The trace name is sanitized and displayed in the
// Cloud Trace tool in the Google Developers Console. The name may be a method
// name or some other per-call site name. For the same executable and the same
// call point, a best practice is to use a consistent name, which makes it
// easier to correlate cross-trace spans.
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

// Start time of the span in nanoseconds from the UNIX epoch.
@property(nonatomic, readwrite) BOOL hasStartTime;
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *startTime;

// End time of the span in nanoseconds from the UNIX epoch.
@property(nonatomic, readwrite) BOOL hasEndTime;
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *endTime;

// ID of the parent span, if any. Optional.
@property(nonatomic, readwrite) uint64_t parentSpanId;

// Collection of labels associated with the span.
// |labels| values are |NSString|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary *labels;
@property(nonatomic, readonly) NSUInteger labels_Count;

@end

int32_t TraceSpan_Kind_RawValue(TraceSpan *message);
void SetTraceSpan_Kind_RawValue(TraceSpan *message, int32_t value);

#pragma mark - ListTracesRequest

typedef GPB_ENUM(ListTracesRequest_FieldNumber) {
  ListTracesRequest_FieldNumber_ProjectId = 1,
  ListTracesRequest_FieldNumber_View = 2,
  ListTracesRequest_FieldNumber_PageSize = 3,
  ListTracesRequest_FieldNumber_PageToken = 4,
  ListTracesRequest_FieldNumber_StartTime = 5,
  ListTracesRequest_FieldNumber_EndTime = 6,
  ListTracesRequest_FieldNumber_Filter = 7,
  ListTracesRequest_FieldNumber_OrderBy = 8,
};

// The request message for the `ListTraces` method. All fields are required
// unless specified.
@interface ListTracesRequest : GPBMessage

// ID of the Cloud project where the trace data is stored.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

// Type of data returned for traces in the list. Optional. Default is
// `MINIMAL`.
@property(nonatomic, readwrite) ListTracesRequest_ViewType view;

// Maximum number of traces to return. If not specified or <= 0, the
// implementation selects a reasonable value.  The implementation may
// return fewer traces than the requested page size. Optional.
@property(nonatomic, readwrite) int32_t pageSize;

// Token identifying the page of results to return. If provided, use the
// value of the `next_page_token` field from a previous request. Optional.
@property(nonatomic, readwrite, copy, null_resettable) NSString *pageToken;

// End of the time interval (inclusive) during which the trace data was
// collected from the application.
@property(nonatomic, readwrite) BOOL hasStartTime;
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *startTime;

// Start of the time interval (inclusive) during which the trace data was
// collected from the application.
@property(nonatomic, readwrite) BOOL hasEndTime;
@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *endTime;

// An optional filter for the request.
@property(nonatomic, readwrite, copy, null_resettable) NSString *filter;

// Field used to sort the returned traces. Optional.
// Can be one of the following:
//
// *   `trace_id`
// *   `name` (`name` field of root span in the trace)
// *   `duration` (difference between `end_time` and `start_time` fields of
//      the root span)
// *   `start` (`start_time` field of the root span)
//
// Descending order can be specified by appending `desc` to the sort field
// (for example, `name desc`).
//
// Only one sort field is permitted.
@property(nonatomic, readwrite, copy, null_resettable) NSString *orderBy;

@end

int32_t ListTracesRequest_View_RawValue(ListTracesRequest *message);
void SetListTracesRequest_View_RawValue(ListTracesRequest *message, int32_t value);

#pragma mark - ListTracesResponse

typedef GPB_ENUM(ListTracesResponse_FieldNumber) {
  ListTracesResponse_FieldNumber_TracesArray = 1,
  ListTracesResponse_FieldNumber_NextPageToken = 2,
};

// The response message for the `ListTraces` method.
@interface ListTracesResponse : GPBMessage

// List of trace records returned.
// |tracesArray| contains |Trace|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *tracesArray;
@property(nonatomic, readonly) NSUInteger tracesArray_Count;

// If defined, indicates that there are more traces that match the request
// and that this value should be passed to the next request to continue
// retrieving additional traces.
@property(nonatomic, readwrite, copy, null_resettable) NSString *nextPageToken;

@end

#pragma mark - GetTraceRequest

typedef GPB_ENUM(GetTraceRequest_FieldNumber) {
  GetTraceRequest_FieldNumber_ProjectId = 1,
  GetTraceRequest_FieldNumber_TraceId = 2,
};

// The request message for the `GetTrace` method.
@interface GetTraceRequest : GPBMessage

// ID of the Cloud project where the trace data is stored.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

// ID of the trace to return.
@property(nonatomic, readwrite, copy, null_resettable) NSString *traceId;

@end

#pragma mark - PatchTracesRequest

typedef GPB_ENUM(PatchTracesRequest_FieldNumber) {
  PatchTracesRequest_FieldNumber_ProjectId = 1,
  PatchTracesRequest_FieldNumber_Traces = 2,
};

// The request message for the `PatchTraces` method.
@interface PatchTracesRequest : GPBMessage

// ID of the Cloud project where the trace data is stored.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectId;

// The body of the message.
@property(nonatomic, readwrite) BOOL hasTraces;
@property(nonatomic, readwrite, strong, null_resettable) Traces *traces;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

// @@protoc_insertion_point(global_scope)
