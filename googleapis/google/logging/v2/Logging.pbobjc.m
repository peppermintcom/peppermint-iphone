// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "google/logging/v2/Logging.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "google/api/MonitoredResource.pbobjc.h"
#import "google/logging/v2/LogEntry.pbobjc.h"
#import "google/protobuf/Empty.pbobjc.h"
#import "google/rpc/Status.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - LoggingRoot

@implementation LoggingRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
    [registry addExtensions:[MonitoredResourceRoot extensionRegistry]];
    [registry addExtensions:[LogEntryRoot extensionRegistry]];
    [registry addExtensions:[GPBEmptyRoot extensionRegistry]];
    [registry addExtensions:[StatusRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - LoggingRoot_FileDescriptor

static GPBFileDescriptor *LoggingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.logging.v2"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DeleteLogRequest

@implementation DeleteLogRequest

@dynamic logName;

typedef struct DeleteLogRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *logName;
} DeleteLogRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logName",
        .number = DeleteLogRequest_FieldNumber_LogName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DeleteLogRequest__storage_, logName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteLogRequest class]
                                     rootClass:[LoggingRoot class]
                                          file:LoggingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DeleteLogRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WriteLogEntriesRequest

@implementation WriteLogEntriesRequest

@dynamic logName;
@dynamic hasResource, resource;
@dynamic labels, labels_Count;
@dynamic entriesArray, entriesArray_Count;

typedef struct WriteLogEntriesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *logName;
  MonitoredResource *resource;
  NSMutableDictionary *labels;
  NSMutableArray *entriesArray;
} WriteLogEntriesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logName",
        .number = WriteLogEntriesRequest_FieldNumber_LogName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(WriteLogEntriesRequest__storage_, logName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "resource",
        .number = WriteLogEntriesRequest_FieldNumber_Resource,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(WriteLogEntriesRequest__storage_, resource),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(MonitoredResource),
        .fieldOptions = NULL,
      },
      {
        .name = "labels",
        .number = WriteLogEntriesRequest_FieldNumber_Labels,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
        .offset = offsetof(WriteLogEntriesRequest__storage_, labels),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "entriesArray",
        .number = WriteLogEntriesRequest_FieldNumber_EntriesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(WriteLogEntriesRequest__storage_, entriesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(LogEntry),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WriteLogEntriesRequest class]
                                     rootClass:[LoggingRoot class]
                                          file:LoggingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(WriteLogEntriesRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WriteLogEntriesResponse

@implementation WriteLogEntriesResponse


typedef struct WriteLogEntriesResponse__storage_ {
  uint32_t _has_storage_[0];
} WriteLogEntriesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WriteLogEntriesResponse class]
                                     rootClass:[LoggingRoot class]
                                          file:LoggingRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(WriteLogEntriesResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListLogEntriesRequest

@implementation ListLogEntriesRequest

@dynamic projectIdsArray, projectIdsArray_Count;
@dynamic filter;
@dynamic orderBy;
@dynamic pageSize;
@dynamic pageToken;

typedef struct ListLogEntriesRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageSize;
  NSMutableArray *projectIdsArray;
  NSString *filter;
  NSString *orderBy;
  NSString *pageToken;
} ListLogEntriesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "projectIdsArray",
        .number = ListLogEntriesRequest_FieldNumber_ProjectIdsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListLogEntriesRequest__storage_, projectIdsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "filter",
        .number = ListLogEntriesRequest_FieldNumber_Filter,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListLogEntriesRequest__storage_, filter),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "orderBy",
        .number = ListLogEntriesRequest_FieldNumber_OrderBy,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListLogEntriesRequest__storage_, orderBy),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "pageSize",
        .number = ListLogEntriesRequest_FieldNumber_PageSize,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ListLogEntriesRequest__storage_, pageSize),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "pageToken",
        .number = ListLogEntriesRequest_FieldNumber_PageToken,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListLogEntriesRequest__storage_, pageToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListLogEntriesRequest class]
                                     rootClass:[LoggingRoot class]
                                          file:LoggingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ListLogEntriesRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListLogEntriesResponse

@implementation ListLogEntriesResponse

@dynamic entriesArray, entriesArray_Count;
@dynamic nextPageToken;

typedef struct ListLogEntriesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *entriesArray;
  NSString *nextPageToken;
} ListLogEntriesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entriesArray",
        .number = ListLogEntriesResponse_FieldNumber_EntriesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ListLogEntriesResponse__storage_, entriesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(LogEntry),
        .fieldOptions = NULL,
      },
      {
        .name = "nextPageToken",
        .number = ListLogEntriesResponse_FieldNumber_NextPageToken,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListLogEntriesResponse__storage_, nextPageToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListLogEntriesResponse class]
                                     rootClass:[LoggingRoot class]
                                          file:LoggingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ListLogEntriesResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListMonitoredResourceDescriptorsRequest

@implementation ListMonitoredResourceDescriptorsRequest

@dynamic pageSize;
@dynamic pageToken;

typedef struct ListMonitoredResourceDescriptorsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageSize;
  NSString *pageToken;
} ListMonitoredResourceDescriptorsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pageSize",
        .number = ListMonitoredResourceDescriptorsRequest_FieldNumber_PageSize,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ListMonitoredResourceDescriptorsRequest__storage_, pageSize),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "pageToken",
        .number = ListMonitoredResourceDescriptorsRequest_FieldNumber_PageToken,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListMonitoredResourceDescriptorsRequest__storage_, pageToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListMonitoredResourceDescriptorsRequest class]
                                     rootClass:[LoggingRoot class]
                                          file:LoggingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ListMonitoredResourceDescriptorsRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListMonitoredResourceDescriptorsResponse

@implementation ListMonitoredResourceDescriptorsResponse

@dynamic resourceDescriptorsArray, resourceDescriptorsArray_Count;
@dynamic nextPageToken;

typedef struct ListMonitoredResourceDescriptorsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *resourceDescriptorsArray;
  NSString *nextPageToken;
} ListMonitoredResourceDescriptorsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resourceDescriptorsArray",
        .number = ListMonitoredResourceDescriptorsResponse_FieldNumber_ResourceDescriptorsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ListMonitoredResourceDescriptorsResponse__storage_, resourceDescriptorsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(MonitoredResourceDescriptor),
        .fieldOptions = NULL,
      },
      {
        .name = "nextPageToken",
        .number = ListMonitoredResourceDescriptorsResponse_FieldNumber_NextPageToken,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListMonitoredResourceDescriptorsResponse__storage_, nextPageToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListMonitoredResourceDescriptorsResponse class]
                                     rootClass:[LoggingRoot class]
                                          file:LoggingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ListMonitoredResourceDescriptorsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
