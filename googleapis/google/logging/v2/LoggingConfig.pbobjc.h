// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30000
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

CF_EXTERN_C_BEGIN

@class LogSink;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum LogSink_VersionFormat

// Available log entry formats. Log entries can be written to Cloud
// Logging in either format and can be exported in either format.
// Version 2 is the preferred format.
typedef GPB_ENUM(LogSink_VersionFormat) {
  LogSink_VersionFormat_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // An unspecified version format will default to V2.
  LogSink_VersionFormat_VersionFormatUnspecified = 0,

  // `LogEntry` version 2 format.
  LogSink_VersionFormat_V2 = 1,

  // `LogEntry` version 1 format.
  LogSink_VersionFormat_V1 = 2,
};

GPBEnumDescriptor *LogSink_VersionFormat_EnumDescriptor(void);

BOOL LogSink_VersionFormat_IsValidValue(int32_t value);

#pragma mark - LoggingConfigRoot

@interface LoggingConfigRoot : GPBRootObject

// The base class provides:
//   + (GPBExtensionRegistry *)extensionRegistry;
// which is an GPBExtensionRegistry that includes all the extensions defined by
// this file and all files that it depends on.

@end

#pragma mark - LogSink

typedef GPB_ENUM(LogSink_FieldNumber) {
  LogSink_FieldNumber_Name = 1,
  LogSink_FieldNumber_Destination = 3,
  LogSink_FieldNumber_Filter = 5,
  LogSink_FieldNumber_OutputVersionFormat = 6,
};

// Describes a sink used to export log entries outside Cloud Logging.
@interface LogSink : GPBMessage

// Required. The client-assigned sink identifier. Example:
// `"my-severe-errors-to-pubsub"`.
// Sink identifiers are limited to 1000 characters
// and can include only the following characters: `A-Z`, `a-z`,
// `0-9`, and the special characters `_-.`.
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

// The export destination. See
// [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
// Examples: `"storage.googleapis.com/a-bucket"`,
// `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
@property(nonatomic, readwrite, copy, null_resettable) NSString *destination;

// An [advanced logs filter](/logging/docs/view/advanced_filters)
// that defines the log entries to be exported.  The filter must be
// consistent with the log entry format designed by the
// `outputVersionFormat` parameter, regardless of the format of the
// log entry that was originally written to Cloud Logging.
// Example: `"logName:syslog AND severity>=ERROR"`.
@property(nonatomic, readwrite, copy, null_resettable) NSString *filter;

// The log entry version used when exporting log entries from this
// sink.  This version does not have to correspond to the version of
// the log entry when it was written to Cloud Logging.
@property(nonatomic, readwrite) LogSink_VersionFormat outputVersionFormat;

@end

int32_t LogSink_OutputVersionFormat_RawValue(LogSink *message);
void SetLogSink_OutputVersionFormat_RawValue(LogSink *message, int32_t value);

#pragma mark - ListSinksRequest

typedef GPB_ENUM(ListSinksRequest_FieldNumber) {
  ListSinksRequest_FieldNumber_ProjectName = 1,
  ListSinksRequest_FieldNumber_PageToken = 2,
  ListSinksRequest_FieldNumber_PageSize = 3,
};

// The parameters to `ListSinks`.
@interface ListSinksRequest : GPBMessage

// Required. The resource name of the project containing the sinks.
// Example: `"projects/my-logging-project"`, `"projects/01234567890"`.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectName;

// Optional. If the `pageToken` request parameter is supplied, then the next
// page of results in the set are retrieved.  The `pageToken` parameter must
// be set with the value of the `nextPageToken` result parameter from the
// previous request. The value of `projectName` must be the same as in the
// previous request.
@property(nonatomic, readwrite, copy, null_resettable) NSString *pageToken;

// Optional. The maximum number of results to return from this request.  Fewer
// results might be returned. You must check for the `nextPageToken` result to
// determine if additional results are available, which you can retrieve by
// passing the `nextPageToken` value in the `pageToken` parameter to the next
// request.
@property(nonatomic, readwrite) int32_t pageSize;

@end

#pragma mark - ListSinksResponse

typedef GPB_ENUM(ListSinksResponse_FieldNumber) {
  ListSinksResponse_FieldNumber_SinksArray = 1,
  ListSinksResponse_FieldNumber_NextPageToken = 2,
};

// Result returned from `ListSinks`.
@interface ListSinksResponse : GPBMessage

// A list of sinks.
// |sinksArray| contains |LogSink|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *sinksArray;
@property(nonatomic, readonly) NSUInteger sinksArray_Count;

// If there are more results than were returned, then `nextPageToken` is
// given a value in the response.  To get the next batch of results, call this
// method again using the value of `nextPageToken` as `pageToken`.
@property(nonatomic, readwrite, copy, null_resettable) NSString *nextPageToken;

@end

#pragma mark - GetSinkRequest

typedef GPB_ENUM(GetSinkRequest_FieldNumber) {
  GetSinkRequest_FieldNumber_SinkName = 1,
};

// The parameters to `GetSink`.
@interface GetSinkRequest : GPBMessage

// The resource name of the sink to return.
// Example: `"projects/my-project-id/sinks/my-sink-id"`.
@property(nonatomic, readwrite, copy, null_resettable) NSString *sinkName;

@end

#pragma mark - CreateSinkRequest

typedef GPB_ENUM(CreateSinkRequest_FieldNumber) {
  CreateSinkRequest_FieldNumber_ProjectName = 1,
  CreateSinkRequest_FieldNumber_Sink = 2,
};

// The parameters to `CreateSink`.
@interface CreateSinkRequest : GPBMessage

// The resource name of the project in which to create the sink.
// Example: `"projects/my-project-id"`.
//
// The new sink must be provided in the request.
@property(nonatomic, readwrite, copy, null_resettable) NSString *projectName;

// The new sink, which must not have an identifier that already
// exists.
@property(nonatomic, readwrite) BOOL hasSink;
@property(nonatomic, readwrite, strong, null_resettable) LogSink *sink;

@end

#pragma mark - UpdateSinkRequest

typedef GPB_ENUM(UpdateSinkRequest_FieldNumber) {
  UpdateSinkRequest_FieldNumber_SinkName = 1,
  UpdateSinkRequest_FieldNumber_Sink = 2,
};

// The parameters to `UpdateSink`.
@interface UpdateSinkRequest : GPBMessage

// The resource name of the sink to update.
// Example: `"projects/my-project-id/sinks/my-sink-id"`.
//
// The updated sink must be provided in the request and have the
// same name that is specified in `sinkName`.  If the sink does not
// exist, it is created.
@property(nonatomic, readwrite, copy, null_resettable) NSString *sinkName;

// The updated sink, whose name must be the same as the sink
// identifier in `sinkName`.  If `sinkName` does not exist, then
// this method creates a new sink.
@property(nonatomic, readwrite) BOOL hasSink;
@property(nonatomic, readwrite, strong, null_resettable) LogSink *sink;

@end

#pragma mark - DeleteSinkRequest

typedef GPB_ENUM(DeleteSinkRequest_FieldNumber) {
  DeleteSinkRequest_FieldNumber_SinkName = 1,
};

// The parameters to `DeleteSink`.
@interface DeleteSinkRequest : GPBMessage

// The resource name of the sink to delete.
// Example: `"projects/my-project-id/sinks/my-sink-id"`.
@property(nonatomic, readwrite, copy, null_resettable) NSString *sinkName;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

// @@protoc_insertion_point(global_scope)
