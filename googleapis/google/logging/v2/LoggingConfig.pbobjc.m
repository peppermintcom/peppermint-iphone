// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "google/logging/v2/LoggingConfig.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "google/protobuf/Empty.pbobjc.h"
#import "google/protobuf/Timestamp.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - LoggingConfigRoot

@implementation LoggingConfigRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
    [registry addExtensions:[GPBEmptyRoot extensionRegistry]];
    [registry addExtensions:[GPBTimestampRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - LoggingConfigRoot_FileDescriptor

static GPBFileDescriptor *LoggingConfigRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.logging.v2"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - LogSink

@implementation LogSink

@dynamic name;
@dynamic destination;
@dynamic filter;
@dynamic outputVersionFormat;

typedef struct LogSink__storage_ {
  uint32_t _has_storage_[1];
  LogSink_VersionFormat outputVersionFormat;
  NSString *name;
  NSString *destination;
  NSString *filter;
} LogSink__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .number = LogSink_FieldNumber_Name,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(LogSink__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "destination",
        .number = LogSink_FieldNumber_Destination,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(LogSink__storage_, destination),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "filter",
        .number = LogSink_FieldNumber_Filter,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(LogSink__storage_, filter),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "outputVersionFormat",
        .number = LogSink_FieldNumber_OutputVersionFormat,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(LogSink__storage_, outputVersionFormat),
        .defaultValue.valueEnum = LogSink_VersionFormat_VersionFormatUnspecified,
        .dataTypeSpecific.enumDescFunc = LogSink_VersionFormat_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = LogSink_VersionFormat_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogSink class]
                                     rootClass:[LoggingConfigRoot class]
                                          file:LoggingConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(LogSink__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LogSink_OutputVersionFormat_RawValue(LogSink *message) {
  GPBDescriptor *descriptor = [LogSink descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LogSink_FieldNumber_OutputVersionFormat];
  return GPBGetMessageInt32Field(message, field);
}

void SetLogSink_OutputVersionFormat_RawValue(LogSink *message, int32_t value) {
  GPBDescriptor *descriptor = [LogSink descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LogSink_FieldNumber_OutputVersionFormat];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum LogSink_VersionFormat

GPBEnumDescriptor *LogSink_VersionFormat_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "VersionFormatUnspecified", .number = LogSink_VersionFormat_VersionFormatUnspecified },
      { .name = "V2", .number = LogSink_VersionFormat_V2 },
      { .name = "V1", .number = LogSink_VersionFormat_V1 },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LogSink_VersionFormat)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:LogSink_VersionFormat_IsValidValue];
  }
  return descriptor;
}

BOOL LogSink_VersionFormat_IsValidValue(int32_t value__) {
  switch (value__) {
    case LogSink_VersionFormat_VersionFormatUnspecified:
    case LogSink_VersionFormat_V2:
    case LogSink_VersionFormat_V1:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ListSinksRequest

@implementation ListSinksRequest

@dynamic projectName;
@dynamic pageToken;
@dynamic pageSize;

typedef struct ListSinksRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageSize;
  NSString *projectName;
  NSString *pageToken;
} ListSinksRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "projectName",
        .number = ListSinksRequest_FieldNumber_ProjectName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListSinksRequest__storage_, projectName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "pageToken",
        .number = ListSinksRequest_FieldNumber_PageToken,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListSinksRequest__storage_, pageToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "pageSize",
        .number = ListSinksRequest_FieldNumber_PageSize,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ListSinksRequest__storage_, pageSize),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListSinksRequest class]
                                     rootClass:[LoggingConfigRoot class]
                                          file:LoggingConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ListSinksRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListSinksResponse

@implementation ListSinksResponse

@dynamic sinksArray, sinksArray_Count;
@dynamic nextPageToken;

typedef struct ListSinksResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sinksArray;
  NSString *nextPageToken;
} ListSinksResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sinksArray",
        .number = ListSinksResponse_FieldNumber_SinksArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ListSinksResponse__storage_, sinksArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(LogSink),
        .fieldOptions = NULL,
      },
      {
        .name = "nextPageToken",
        .number = ListSinksResponse_FieldNumber_NextPageToken,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListSinksResponse__storage_, nextPageToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListSinksResponse class]
                                     rootClass:[LoggingConfigRoot class]
                                          file:LoggingConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ListSinksResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSinkRequest

@implementation GetSinkRequest

@dynamic sinkName;

typedef struct GetSinkRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *sinkName;
} GetSinkRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sinkName",
        .number = GetSinkRequest_FieldNumber_SinkName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GetSinkRequest__storage_, sinkName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSinkRequest class]
                                     rootClass:[LoggingConfigRoot class]
                                          file:LoggingConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GetSinkRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateSinkRequest

@implementation CreateSinkRequest

@dynamic projectName;
@dynamic hasSink, sink;

typedef struct CreateSinkRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *projectName;
  LogSink *sink;
} CreateSinkRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "projectName",
        .number = CreateSinkRequest_FieldNumber_ProjectName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(CreateSinkRequest__storage_, projectName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "sink",
        .number = CreateSinkRequest_FieldNumber_Sink,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(CreateSinkRequest__storage_, sink),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(LogSink),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateSinkRequest class]
                                     rootClass:[LoggingConfigRoot class]
                                          file:LoggingConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(CreateSinkRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateSinkRequest

@implementation UpdateSinkRequest

@dynamic sinkName;
@dynamic hasSink, sink;

typedef struct UpdateSinkRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *sinkName;
  LogSink *sink;
} UpdateSinkRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sinkName",
        .number = UpdateSinkRequest_FieldNumber_SinkName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UpdateSinkRequest__storage_, sinkName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "sink",
        .number = UpdateSinkRequest_FieldNumber_Sink,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(UpdateSinkRequest__storage_, sink),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(LogSink),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateSinkRequest class]
                                     rootClass:[LoggingConfigRoot class]
                                          file:LoggingConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UpdateSinkRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteSinkRequest

@implementation DeleteSinkRequest

@dynamic sinkName;

typedef struct DeleteSinkRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *sinkName;
} DeleteSinkRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sinkName",
        .number = DeleteSinkRequest_FieldNumber_SinkName,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DeleteSinkRequest__storage_, sinkName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteSinkRequest class]
                                     rootClass:[LoggingConfigRoot class]
                                          file:LoggingConfigRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DeleteSinkRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
